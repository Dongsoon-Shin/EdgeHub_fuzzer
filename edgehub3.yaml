  opcua server:
    data:
      port:
        default: 53530
        input: true
        type: "number"
      NodeClassMask:
        default:
          Object: 1
          Variable: 2
          Method: 4
          ObjectType: 8
          VariableType: 16
          ReferenceType: 32
          DataType: 64
          View: 128
      Guid_Data4:
        default: 1
      SecureChannelId:
        default: 9
      SequenceNumber:
        default: 250
      SubscriptionId:
        default: 1
      TokenId:
        default: 100
      address:
        default: "127.0.0.1"
      attributes:
        default:
          "1":
            name: "NodeId"
            variantType: 17
            dataType: "NodeId"
          "2":
            name: "NodeClass"
            variantType: 6
            dataType: "Int32"
          "3":
            name: "BrowseName"
            variantType: 20
            dataType: "QualifiedName"
          "4":
            name: "DisplayName"
            variantType: 21
            dataType: "LocalizedText"
          "5":
            name: "Description"
            variantType: 21
            dataType: "LocalizedText"
            optional: true
          "6":
            name: "WriteMask"
            variantType: 6
            dataType: "Int32"
            optional: true
          "7":
            name: "UserWriteMask"
            variantType: 6
            dataType: "Int32"
            optional: true
          "8":
            name: "IsAbstract"
            dataType: "Boolean"
            variantType: 1
          "9":
            name: "Symmetric"
            dataType: "Boolean"
            variantType: 1
          "10":
            name: "InverseName"
            dataType: "LocalizedText"
            variantType: 21
            optional: true
          "11":
            name: "ContainsNoLoops"
            dataType: "Boolean"
            variantType: 1
          "12":
            name: "EventNotifier"
            dataType: "Byte"
            variantType: 3
          "13":
            name: "Value"
            optional: true
          "14":
            name: "DataType"
            variantType: 17
            dataType: "NodeId"
          "15":
            name: "ValueRank"
            variantType: 6
            dataType: "Int32"
          "16":
            name: "ArrayDimensions"
            variantType: 7
            dataType: "UInt32"
            isArray: true
            optional: true
          "17":
            name: "AccessLevel"
            dataType: "Byte"
            variantType: 3
          "18":
            name: "UserAccessLevel"
            dataType: "Byte"
            variantType: 3
          "19":
            name: "MinimumSamplingInterval"
            dataType: "Double"
            variantType: 11
            optional: true
          "20":
            name: "Historizing"
            dataType: "Boolean"
            variantType: 1
          "21":
            name: "Executable"
            dataType: "Boolean"
            variantType: 1
          "22":
            name: "UserExecutable"
            dataType: "Boolean"
            variantType: 1
          "23":
            name: "DataTypeDefinition"
            dataType: "String"
            variantType: 12
            optional: true
          "24":
            name: "RolePermissions"
            dataType: "Byte"
            variantType: 3
            optional: true
          "25":
            name: "UserRolePermissions"
            dataType: "Byte"
            variantType: 3
            optional: true
          "26":
            name: "AccessRestrictions"
            dataType: "Byte"
            variantType: 3
            optional: true
          "27":
            name: "AccessLevelEx"
            dataType: "Byte"
            variantType: 3
            optional: true
      authenticationToken:
        default: 1
      monitoredItem:
        default: {}
      node:
        default:
          "0":
            "1": # Boolean
              ref: {}
              "1": 1
              "2": 64 # DataType Node Class
              "3": "Boolean"
              "4": "Boolean"
              "5": "Boolean"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "2": # SByte
              ref: {}
              "1": 2
              "2": 64 # DataType Node Class
              "3": "SByte"
              "4": "SByte"
              "5": "SByte"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "3": # Byte
              ref: {}
              "1": 3
              "2": 64 # DataType Node Class
              "3": "Byte"
              "4": "Byte"
              "5": "Byte"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "4": # Int16
              ref: {}
              "1": 4
              "2": 64 # DataType Node Class
              "3": "Int16"
              "4": "Int16"
              "5": "Int16"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "5": # UInt16
              ref: {}
              "1": 5
              "2": 64 # DataType Node Class
              "3": "UInt16"
              "4": "UInt16"
              "5": "UInt16"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "6": # Int32
              ref: {}
              "1": 6
              "2": 64 # DataType Node Class
              "3": "Int32"
              "4": "Int32"
              "5": "Int32"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "7": # UInt32
              ref: {}
              "1": 7
              "2": 64 # DataType Node Class
              "3": "UInt32"
              "4": "UInt32"
              "5": "UInt32"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "8": # Int64
              ref: {}
              "1": 8
              "2": 64 # DataType Node Class
              "3": "Int64"
              "4": "Int64"
              "5": "Int64"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "9": # UInt64
              ref: {}
              "1": 9
              "2": 64 # DataType Node Class
              "3": "UInt64"
              "4": "UInt64"
              "5": "UInt64"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "10": # Float
              ref: {}
              "1": 10
              "2": 64 # DataType Node Class
              "3": "Float"
              "4": "Float"
              "5": "Float"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "11": # Double
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "290" # Duration
              "1": 11
              "2": 64 # DataType Node Class
              "3": "Double"
              "4": "Double"
              "5": "Double"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "12": # String
              ref: {}
              "1": 12
              "2": 64 # DataType Node Class
              "3": "String"
              "4": "String"
              "5": "String"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "13": # DateTime
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "293" # Date
              "1": 13
              "2": 64 # DataType Node Class
              "3": "DateTime"
              "4": "DateTime"
              "5": "DateTime"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "15": # ByteString
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "311" # ApplicationInstanceCertificate
              "1": 15
              "2": 64 # DataType Node Class
              "3": "ByteString"
              "4": "ByteString"
              "5": "ByteString"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "23": # DataValue
              ref: {}
              "1": 23
              "2": 64 # DataType Node Class
              "3": "DataValue"
              "4": "DataValue"
              "5": "DataValue"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "24": # BaseDataType
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "1" # Boolean
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "15" # ByteString
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "23" # DataValue
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "25" # DiagnosticInfo
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "26" # Number
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "12" # String
              "1": 24
              "2": 64 # DataType Node Class
              "3": "BaseDataType"
              "4": "BaseDataType"
              "5": "BaseDataType"
              "6": 0
              "7": 0
              "8": 1 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "25": # DiagnosticInfo
              ref: {}
              "1": 25
              "2": 64 # DataType Node Class
              "3": "DiagnosticInfo"
              "4": "DiagnosticInfo"
              "5": "DiagnosticInfo"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "26": # Number
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "50" # Decimal
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "11" # Double
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "10" # Float
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "27" # Integer
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "28" # UInteger
              "1": 26
              "2": 64 # DataType Node Class
              "3": "Number"
              "4": "Number"
              "5": "Number"
              "6": 0
              "7": 0
              "8": 1 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "27": # Integer
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "2" # SByte
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "4" # Int16
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "6" # Int32
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "8" # Int64
              "1": 27
              "2": 64 # DataType Node Class
              "3": "Integer"
              "4": "Integer"
              "5": "Integer"
              "6": 0
              "7": 0
              "8": 1 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "28": # UInteger
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "3" # Byte
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "5" # UInt16
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "7" # UInt32
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "9" # UInt64
              "1": 28
              "2": 64 # DataType Node Class
              "3": "UInteger"
              "4": "UInteger"
              "5": "UInteger"
              "6": 0
              "7": 0
              "8": 1 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "31": # References
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "33" # HierarchicalReferences
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "32" # NonHierarchicalReferences
              "1": 31
              "2": 32 # ReferenceType Node Class
              "3": "References"
              "4": "References"
              "5": "References"
              "8": 1 # Abstract
              "9": 1 # Symmetric
            "32": # NonHierarchicalReferences
              ref:
                "45": []
              "1": 32
              "2": 32 # ReferenceType Node Class
              "3": "NonHierarchicalReferences"
              "4": "NonHierarchicalReferences"
              "5": "NonHierarchicalReferences"
              "8": 1 # Abstract
              "9": 1 # Symmetric
            "33": # HierarchicalReferences
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "34" # HasChild
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "35" # Organizes
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "36" # HasEventSource
              "1": 33
              "2": 32 # ReferenceType Node Class
              "3": "HierarchicalReferences"
              "4": "HierarchicalReferences"
              "5": "HierarchicalReferences"
              "8": 1 # Abstract
              "9": 1 # Symmetric
            "34": # HasChild
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "44" # Aggregates
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "45" # HasSubtype
              "1": 34
              "2": 32
              "3": "HasChild"
              "4": "HasChild"
              "5": "HasChild"
              "8": 1 # Abstract
              "9": 0 # Not Symmetric
            "35": # Organizes
              ref: {}
              "1": 35
              "2": 32
              "3": "Organizes"
              "4": "Organizes"
              "5": "Organizes"
              "8": 0 # Not Abstract
              "9": 0 # Not Symmetric
              "10": "OrganizedBy"
            "36": # HasEventSource
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "48" # HasNotifier
              "1": 36
              "2": 32
              "3": "HasEventSource"
              "4": "HasEventSource"
              "5": "HasEventSource"
              "8": 0 # Not Abstract
              "9": 0 # Not Symmetric
              "10": "EventSourceOf"
            "44": # Aggregates
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "47" # HasComponent
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "46" # HasProperty
              "1": 44
              "2": 32
              "3": "Aggregates"
              "4": "Aggregates"
              "5": "Aggregates"
              "8": 1 # Abstract
              "9": 0 # Not Symmetric
            "45": # HasSubtype
              ref: {}
              "1": 45
              "2": 32
              "3": "HasSubtype"
              "4": "HasSubtype"
              "5": "HasSubtype"
              "8": 0 # Not Abstract
              "9": 0 # Not Symmetric
              "10": "SubtypeOf"
            "46": # HasProperty
              ref: {}
              "1": 46
              "2": 32
              "3": "HasProperty"
              "4": "HasProperty"
              "5": "HasProperty"
              "8": 0 # Not Abstract
              "9": 0 # Not Symmetric
              "10": "PropertyOf"
            "47": # HasComponent
              ref:
                - type: "45" # HasSubtype
                  namespace: "0"
                  nodeId: "49" # HasOrderedComponent
              "1": 47
              "2": 32
              "3": "HasComponent"
              "4": "HasComponent"
              "5": "HasComponent"
              "8": 1 # Abstract
              "9": 0 # Not Symmetric
              "10": "ComponentOf"
            "48": # HasNotifier
              ref: {}
              "1": 48
              "2": 32
              "3": "HasNotifier"
              "4": "HasNotifier"
              "5": "HasNotifier"
              "8": 0 # Not Abstract
              "9": 0 # Not Symmetric
              "10": "NotifierOf"
            "49": # HasOrderedComponent
              ref: {}
              "1": 49
              "2": 32
              "3": "HasOrderedComponent"
              "4": "HasOrderedComponent"
              "5": "HasOrderedComponent"
              "8": 0 # Not Abstract
              "9": 0 # Not Symmetric
              "10": "OrderedComponentOf"
            "50": # Decimal
              ref: {}
              "1": 50
              "2": 64 # DataType Node Class
              "3": "Decimal"
              "4": "Decimal"
              "5": "Decimal"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "61": # FolderType
              ref: {}
              "1": 61
              "2": 8
              "3": "FolderType"
              "4": "FolderType"
              "5": "FolderType"
              "8": 0 # Not Abstract
            "84": # RootFolder
              ref:
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "85" # ObjectsFolder
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "86" # TypesFolder
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "87" # ViewsFolder
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61" # FolderType
              "1": 84
              "2": 1
              "3": "RootFolder"
              "4": "RootFolder"
              "5": "RootFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "85": # ObjectsFolder
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61"
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "2253" # Server
                - type: "35" # Organizes
                  namespace: "1"
                  nodeIdType: "String"
                  nodeId: "EdgeHub"
              "1": 85
              "2": 1
              "3": "ObjectsFolder"
              "4": "ObjectsFolder"
              "5": "ObjectsFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "86": # TypesFolder
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61"
                # - type: "35" # Organizes
                #   namespace: "0"
                #   nodeId: "88" # ObjectTypesFolder
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "89" # VariableTypesFolder
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "90" # DataTypesFolder
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "91" # VariableTypesFolder
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "3048" # EventTypesFolder
              "1": 86
              "2": 1
              "3": "TypesFolder"
              "4": "TypesFolder"
              "5": "TypesFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "87": # ViewsFolder
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61" # FolderType
              "1": 87
              "2": 1
              "3": "ViewsFolder"
              "4": "ViewsFolder"
              "5": "ViewsFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "89": # VariableTypesFolder
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61" # FolderType
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "62" # BaseVariableType
              "1": 87
              "2": 1
              "3": "VariableTypesFolder"
              "4": "VariableTypesFolder"
              "5": "VariableTypesFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "90": # DataTypesFolder
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61" # FolderType
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "24" # BaseDataType
              "1": 90
              "2": 1
              "3": "DataTypesFolder"
              "4": "DataTypesFolder"
              "5": "DataTypesFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "91": # ReferenceTypesFolder
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61" # FolderType
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "31" # References
              "1": 91
              "2": 1
              "3": "ReferenceTypesFolder"
              "4": "ReferenceTypesFolder"
              "5": "ReferenceTypesFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "290": # Duration
              ref: {}
              "1": 290
              "2": 64 # DataType Node Class
              "3": "Duration"
              "4": "Duration"
              "5": "Duration"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "293": # Date
              ref: {}
              "1": 293
              "2": 64 # DataType Node Class
              "3": "Date"
              "4": "Date"
              "5": "Date"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "294": # UtcTime
              ref: {}
              "1": 294
              "2": 64 # DataType Node Class
              "3": "UtcTime"
              "4": "UtcTime"
              "5": "UtcTime"
              "6": 0
              "7": 0
              "8": 0 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "311": # ApplicationInstanceCertificate
              ref:{}
              "1": 311
              "2": 64 # DataType Node Class
              "3": "ApplicationInstanceCertificate"
              "4": "ApplicationInstanceCertificate"
              "5": "ApplicationInstanceCertificate"
              "6": 0
              "7": 0
              "8": 1 # Abstract
              "14":
                EncodingByte: 1
                Identifier:
                  value: 63
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "2253": # Server
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "2004" # ServerType
              "1": 2253
              "2": 1
              "3": "Server"
              "4": "Server"
              "5": "Servers"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "2255": # NamespaceArray
              arrayLength: 2
              serverTimestamp:
                value: 131944948300420000
              sourceTimestamp:
                value: 131944948300410000
              variantType: 0x8c
              "1": 2255
              "2": 16
              "3": "NamespaceArray"
              "4": "NamespaceArray"
              "5": "NamespaceArray"
              "8": 0
              "13":
                - Length:
                    value: 0x1c
                  value: "http://opcfoundation.org/UA/"
                - Length:
                    value: 32
                  value: "urn:interactor.com:OPCUA:EdgeHub"
            "2256": # ServerStatus
              dataType: "ServerStatusDataType"
              dynamic:
                - function: "update_map_with_current_time"
                  path:
                    - "currentTime"
                    - "value"
              serverTimestamp:
                value: 131944948300420000
              sourceTimestamp:
                value: 131944948300410000
              variantType: 0x16
              "1": 2256
              "2": 16
              "3": "ServerStatus"
              "4": "ServerStatus"
              "5": "ServerStatus"
              "8": 0
              "13":
                buildInfo:
                  BuildDate:
                    value: 0
                  BuildNumber:
                    Length:
                      value: 3
                    value: "3-4"
                  ManufacturerName:
                    Length:
                      value: -1
                    value: ""
                  ProductName:
                    Length:
                      value: 7
                    value: "EdgeHub"
                  ProductUri:
                    Length:
                      value: 32
                    value: "urn:interactor.com:OPCUA:EdgeHub"
                  SoftwareVersion:
                    Length:
                      value: 3
                    value: "0.1"
                currentTime:
                  value: function("current_time")
                secondsTillShutdown:
                  value: 0
                shutdownReason:
                  EncodingMask:
                    value: 3
                  Locale:
                    - Length:
                        value: 0
                      value: ""
                  Text:
                    - Length:
                        value: 0
                      value: ""
                startTime:
                  value: 131944948300410000
                state:
                  value: 0
              "14":
                EncodingByte: 1
                Identifier:
                  value: 864
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
              "15": -1
              "17":
                value: 0b00000001
              "18":
                value: 0b00000000
              "20":
                value: 0
            "3048": # EventTypesFolder
              ref:
                - type: "40" # HasTypeDefinition
                  namespace: "0"
                  nodeId: "61" # FolderType
                - type: "35" # Organizes
                  namespace: "0"
                  nodeId: "2041" # BaseEventType
              "1": 91
              "2": 1
              "3": "EventTypesFolder"
              "4": "EventTypesFolder"
              "5": "EventTypesFolder"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
          "1":
            "Device": # EdgeHub Folder
              ref:
                - type: "35" # Organizes
                  namespace: "1"
                  nodeIdType: "String"
                  nodeId: "Device.Group1"
              "1": "Device"
              "2": 1
              "3": "Device"
              "4": "Device"
              "5": "Device"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "Device.Group1.Device1": # EdgeHub Folder
              ref:
                - type: "35" # Organizes
                  namespace: "1"
                  nodeIdType: "String"
                  nodeId: "Device.Group1.Device1.Tag1"
              "1": "Device.Group1.Device1"
              "2": 1
              "3": "Device1"
              "4": "Device1"
              "5": "Device1"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "Device.Group1": # EdgeHub Folder
              ref:
                - type: "35" # Organizes
                  namespace: "1"
                  nodeIdType: "String"
                  nodeId: "Device.Group1.Device1"
              "1": "Device.Group1"
              "2": 1
              "3": "Group1"
              "4": "Group1"
              "5": "Group1"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "EdgeHub": # EdgeHub Folder
              ref:
                - type: "35" # Organizes
                  namespace: "1"
                  nodeIdType: "String"
                  nodeId: "tag"
              "1": "EdgeHub"
              "2": 1
              "3": "EdgeHub"
              "4": "EdgeHub"
              "5": "EdgeHub"
              "14":
                EncodingByte: 1
                Identifier:
                  value: 61
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
            "Device.Group1.Device1.Tag1": # EdgeHub Object
              variantType: 6
              ref: {}
              "1": "Device.Group1.Device1.Tag1"
              "2": 2
              "3": "Tag1"
              "4": "Tag1"
              "5": "Tag1"
              "13":
                value: 111
              "14":
                EncodingByte: 1
                Identifier:
                  value: 6
                Namespace:
                  value: 0
                NamespaceUri: []
                ServerIndex: []
      subscriptions:
        default: []
      type:
        default:
          t0: "OPCNull"
          t1: "Boolean"
          t10: "Float"
          t11: "Double"
          t12: "String"
          t13: "DateTime"
          t14: "Guid"
          t15: "ByteString"
          t16: "XmlElement"
          t17: "NodeId"
          t18: "ExpandedNodeId"
          t19: "StatusCode"
          t2: "SByte"
          t20: "QualifiedName"
          t21: "LocalizedText"
          t22: "ExtensionObject"
          t23: "DataValue"
          t24: "Variant"
          t25: "DiagnosticInfo"
          t3: "Byte"
          t4: "Int16"
          t5: "UInt16"
          t6: "Int32"
          t7: "UInt32"
          t8: "Int64"
          t9: "Uint64"
    function:
      publish_task:
        logic:
          $action: "elixir"
          value: |
            subscriptionId = v["data"][:config]["subscriptionId"]
            pid = get(["subscriptions", subscriptionId, "pid"])
            case Process.alive?(pid) do
              true ->
                var!(execution_state) = var!(execution_state) |> Map.put(:instance_pid, pid)
                data = function("publish")
                cond do
                  data == "" -> Log.info("opcua_subscription_test: error: no publish request")
                  is_binary(data) -> data |> respond()
                  true -> Log.info("opcua_subscription_test: error: unknown data type")
                end
              _ ->
                Log.info("opcua_subscription_test: error: session closed")
            end
      spawn_subscription_task:
        logic:
          $action: "elixir"
          value: |
            instance_name = "opcua_subscription_" <> inspect v["subscriptionId"]
            Interactor.Instance.stop(instance_name, Execution.State.new("opcua"))
            instance(instance_name, "spawn", %{
              "use" => "timer",
              "data" => %{
                "interval" => v["revisedPublishingInterval"],
                "subscriptionId" => v["subscriptionId"] |> to_string()
              },
              "event" => %{
                "execute" => "publish_task"
              }
            })
      get_node:
        logic:
          $action: "elixir"
          value: |
            namespace = v["namespace"] || "0"
            nodeId = v["nodeId"] || "0"
            node = case namespace do
              "1" ->
                case nodeId do
                  "EdgeHub" -> get(["node", namespace, nodeId])
                  _ ->
                    path = nodeId |> String.split(".")
                    name = path |> Enum.at(-1)
                    value = get(["value"] ++ path, default: "FAILED", project: "edgehub_solution_default")
                    type = cond do
                      is_integer(value) -> 6
                      is_float(value) -> 11
                      is_binary(value) -> 12
                      is_map(value) -> 61
                      true -> 61
                    end
                    Log.info("get_node: Device: value: " <> inspect value)
                    ref = cond do
                      is_map(value) ->
                        value |> Enum.map(fn {key, _value} ->
                          %{
                            "type" => "35",
                            "namespace" => "1",
                            "nodeIdType" => "String",
                            "nodeId" => nodeId <> "." <> key
                          }
                        end)
                      true -> []
                    end
                    nodeClass = cond do
                      is_map(value) -> 1
                      true -> 2
                    end
                    %{
                      "variantType" => type,
                      "ref" => ref,
                      "1" => nodeId,
                      "2" => nodeClass,
                      "3" => name,
                      "4" => name,
                      "5" => name,
                      "14" => %{
                        "EncodingByte" => 1,
                        "Identifier" => %{
                          "value" => type
                        },
                        "Namespace" => %{
                          "value" => 0
                        },
                        "NamespaceUri" => [],
                        "ServerIndex" => []
                      }
                    } |> Map.put("13", case type do
                      12 -> %{"Length" => byte_size(value), "value" => value}
                      61 -> %{}
                      _ -> %{"value" => value}
                    end)
                end
              _ -> get(["node", namespace, nodeId])
            end
            Log.info("get_node: Device: node: " <> inspect node)
            node
      publish:
        logic:
          $action: "elixir"
          value: |
            receivedId = get("receivedPublishId") || 0
            usedPublishId = get("usedPublishId") || 0
            items = get(["monitoredItem"]) || %{}
            if ((receivedId > usedPublishId) && (items != %{})) do
              sequenceNumber = count(["usedPublishId"], 1)
              Log.info("publish: usedPublishId: " <> inspect sequenceNumber)
              subscriptionIds = items |> Enum.reduce([], fn {key, value}, acc ->
                [value["subscriptionInfo"]|acc]
              end) |> Enum.uniq()
              subscriptionId = subscriptionIds |> Enum.at(0)
              publishId = sequenceNumber |> to_string()
              publishQueue = get(["PublishQueue", publishId])
              publishRequest = publishQueue["Body"]
              notificationQueue = get(["NotificationQueue", subscriptionId |> to_string()]) || %{}
              availableSequenceNumbers = (notificationQueue |> Map.keys() |> Enum.map(fn x -> %{"value" => String.to_integer(x)} end)) ++ [%{"value" => sequenceNumber}]
              clear(["PublishQueue", publishId])
              requestHandle = publishRequest["requestHeader"]["requestHandle"]["value"]
              monitoredItems = items |> Enum.map(fn {monitoredItemId, monitoredItemRequest} ->
                clientHandle = monitoredItemRequest["info"]["requestedParameters"]["clientHandle"]["value"]
                nodeId = monitoredItemRequest["info"]["itemToMonitor"]["nodeId"]["Identifier"]["value"]
                namespace = monitoredItemRequest["info"]["itemToMonitor"]["nodeId"]["Namespace"]["value"] |> to_string()
                node = function("get_node", %{"namespace" => namespace, "nodeId" => nodeId})
                %{
                  "Value" => %{
                    "EncodingMask" => %{"value" => 13},
                    "ServerPicoSeconds" => [],
                    "SourceTimestamp" => [%{"value" => function("current_time")}],
                    "ServerTimestamp" => [%{"value" => function("current_time")}],
                    "SourcePicoSeconds" => [],
                    "Status" => [],
                    "Value" => [
                      %{
                        "ArrayDimensions" => [],
                        "ArrayDimensionsLength" => [],
                        "ArrayLength" => [],
                        "EncodingMask" => %{"value" => node["variantType"]},
                        "Value" => [node["13"]]
                      }
                    ]
                  },
                  "clientHandle" => %{"value" => clientHandle}
                }
              end)
              dataChangeNotification = %{
                "diagnosticInfoLength" => %{"value" => -1},
                "diagnosticInfos" => [],
                "itemsLength" => %{"value" => 1},
                "monitoredItems" => monitoredItems
              }
              encoded = dataChangeNotification |> encode("DataChangeNotification")
              notificationData = %{
                "Body" => [
                  %{
                    "Length" => %{"value" => byte_size(encoded.result)},
                    "value" => encoded.result
                  }
                ],
                "Encoding" => %{"value" => 1},
                "TypeId" => %{
                  "EncodingByte" => 1,
                  "Identifier" => %{"value" => 811},
                  "Namespace" => %{"value" => 0},
                  "NamespaceUri" => [],
                  "ServerIndex" => []
                }
              }
              notificationMessage = %{
                "dataLength" => %{"value" => 1},
                "notificationData" => [notificationData],
                "publishTime" => %{"value" => function("current_time")},
                "sequenceNumber" => %{"value" => sequenceNumber}
              }
              data = %{
                "TypeId" => %{
                  "EncodingByte" => 1,
                  "Identifier" => %{"value" => 829},
                  "Namespace" => %{"value" => 0},
                  "NamespaceUri" => [],
                  "ServerIndex" => []
                },
                "availableSequenceNumbers" => availableSequenceNumbers,
                "diagnosticInfos" => [],
                "infoLength" => %{"value" => -1},
                "moreNotifications" => %{"value" => 0},
                "notificationMessage" => notificationMessage,
                "responseHeader" => %{
                  "additionalHeader" => %{
                    "Body" => [],
                    "Encoding" => %{"value" => 0},
                    "TypeId" => %{
                      "EncodingByte" => 0,
                      "Identifier" => %{"value" => 0},
                      "NamespaceUri" => [],
                      "ServerIndex" => []
                    }
                  },
                  "requestHandle" => %{"value" => requestHandle},
                  "serviceDiagnostics" => %{
                    "AdditionalInfo" => [],
                    "EncodingMask" => %{"value" => 0},
                    "InnerDiagnosticInfo" => [],
                    "InnerStatusCode" => [],
                    "Locale" => [],
                    "LocalizedText" => [],
                    "NamespaceUri" => [],
                    "SymbolicId" => []
                  },
                  "serviceResult" => %{"value" => 0},
                  "stringTable" => [],
                  "stringTableLength" => %{"value" => -1},
                  "timestamp" => %{"value" => function("current_time")}
                },
                "resultLength" => %{"value" => -1},
                "results" => [],
                "sequenceNumLength" => %{"value" => availableSequenceNumbers |> length()},
                "subscriptionId" => %{"value" => subscriptionId}
              } |> encode("PublishResponse")
              set(["NotificationQueue", subscriptionId |> to_string(), sequenceNumber |> to_string()], notificationMessage)
              function("create_message", publishQueue |> Map.put("_encodedBody", data))
            else
              ""
            end
      check_msg_header:
        logic:
          $action: "elixir"
          value: |
            Log.info("check_msg_header: " <> inspect v)
      create_message:
        logic:
          $action: "elixir"
          value: |
            encodedBody = v["_encodedBody"]
            sequenceNumber = count("SequenceNumber", 1)
            secureChannelId = v["MessageHeader"]["SecureChannelId"]["value"]
            requestId = v["SequenceHeader"]["RequestId"]["value"]
            tokenId = v["SecurityHeader"]["TokenId"]["value"]
            encodedMessageHeader = encode(%{
              "IsFinal" => "F",
              "MessageSize" => %{"value" => (byte_size(encodedBody.result) + 24)},
              "SecureChannelId" => %{"value" => secureChannelId},
              "messageType" => "MSG"
              }, "SecureConversationMessageheader")
            encodedSecurityHeader = encode(%{
              "TokenId" => %{"value" => tokenId}
            }, "SymmetricalgorithmSecurityheader")
            encodedSequenceHeader = encode(%{
              "RequestId" => %{"value" => requestId},
              "SequenceNumber" => %{"value" => sequenceNumber}
            }, "Sequenceheader")
            encodedMessageHeader.result <> encodedSecurityHeader.result <> encodedSequenceHeader.result <> encodedBody.result
      current_time:
        logic:
          $action: "elixir"
          value: |
            (:os.system_time(:microsecond) * 10) + 116444736000000000
      get_reference_list:
        logic:
          $action: "elixir"
          value: |
            get_reference_list = fn (f, reference_id) ->
                node = function("get_node", %{"namespace" => "0", "nodeId" => reference_id})
                case node["ref"] do
                  nil -> [reference_id]
                  %{} -> [reference_id]
                  ref ->
                    cond do
                      is_list(ref) ->
                        ref |> Enum.reduce([reference_id], fn x, acc ->
                          acc ++ f.(f, x["nodeId"])
                        end)
                      true -> [reference_id]
                    end
                end
            end
            reference_list = get_reference_list.(get_reference_list, v["reference_id"])
            reference_node = function("get_node", %{"namespace" => v["namespace"], "nodeId" => v["node_id"]})
            references = if (reference_node) do
              reference_node["ref"] || []
            else
              []
            end
            references |> Enum.filter(fn x -> reference_list |> Enum.member?(x["type"]) end)
        testInput:
          default: "%{\"namespace\" => \"0\", \"node_id\" => \"84\", \"reference_id\" => \"31\"}"
      update_map_with_current_time:
        logic:
          $action: "elixir"
          value: |
            time = function("current_time")
            Interactor.Object.put_in(v["map"], v["path"], time)
    instance:
      server:
        data:
          port:
            $action: "elixir"
            value: |
              get("port")
        event:
          connected:
            $action: "elixir"
            value: |
              Log.info("connected: " <> inspect v)
              set "startTime", function("current_time")
          disconnected:
            $action: "elixir"
            value: |
              Log.info("disconnected: " <> inspect v)
              Log.info("disconnected: pid: " <> inspect self())
          received:
            $action: "match"
            key:
              - "data"
            matches:
              - do:
                  $action: "conditional"
                  conditions:
                    - condition:
                        $action: "elixir"
                        value: |
                          v["data"]["MessageHeader"]["IsFinal"] == "C"
                      do:
                        $action: "elixir"
                        value: |
                          Log.info("ChunkData: do: C: " <> inspect v)
                          secure_channel_id = v["data"]["MessageHeader"]["SecureChannelId"]["value"]
                          body = get(["body", secure_channel_id])
                          set(["body", secure_channel_id], body <> v["data"]["Body"])
                    - condition:
                        $action: "elixir"
                        value: |
                          v["data"]["MessageHeader"]["IsFinal"] == "F"
                      do:
                        $action: "sequence"
                        value:
                          - $action: "elixir"
                            value: |
                              Log.info("ChunkData: sequence: elixir: " <> inspect v)
                              secure_channel_id = v["data"]["MessageHeader"]["SecureChannelId"]["value"]
                              previous = get(["body", secure_channel_id])
                              clear(["body", secure_channel_id])
                              body = cond do
                                is_binary(previous) -> previous <> v["data"]["Body"]
                                true -> v["data"]["Body"]
                              end
                              v["data"] |> Map.put("Body", body)
                            $set:
                              - "data"
                          - $action: "match"
                            key:
                              - "data"
                              - "Body"
                            matches:
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: ReadRequest: " <> inspect v)
                                    sourceTimestamp = [%{"value" => function("current_time")}]
                                    serverTimestamp = [%{"value" => function("current_time")}]
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    timestampsToReturn = v["data"]["Body"]["timestampsToReturn"]["value"]
                                    nodesToRead = v["data"]["Body"]["nodesToRead"] || []
                                    nodesToProcess = nodesToRead |> Enum.take(v["data"]["Body"]["nodeLength"]["value"])
                                    results = nodesToProcess |> Enum.map(fn x ->
                                      Log.info("ChunkData: do: ReadRequest: x: " <> inspect x)
                                      nodeId = x["nodeId"]["Identifier"]["value"] |> to_string()
                                      namespace = if (x["nodeId"]["Namespace"]["value"]), do: x["nodeId"]["Namespace"]["value"] |> to_string(), else: "0"
                                      case function("get_node", %{"namespace" => namespace, "nodeId" => nodeId}) do
                                        nil ->
                                          %{
                                            "EncodingMask" => %{"value" => 0b10},
                                            "Status" => [%{"value" => 0x80340000}],
                                            "Value" => []
                                          }
                                        node ->
                                          attributeId = x["attributeId"]["value"] |> to_string()
                                          case node[attributeId] do
                                            nil ->
                                              %{
                                                "EncodingMask" => %{"value" => 0b10},
                                                "Status" => [%{"value" => 0x80350000}],
                                                "Value" => []
                                              }
                                            node_attribute ->
                                              Log.info("ChunkData: do: ReadRequest: node_attribute: " <> inspect node_attribute)
                                              dynamic = node["dynamic"] || []
                                              reduced = dynamic |> Enum.reduce(node_attribute, fn y, acc ->
                                                new = function(y["function"], %{"path" => y["path"], "map" => acc, "value" => y["value"]})
                                                new
                                              end)
                                              Log.info("ChunkData: do: ReadRequest: reduced: " <> inspect reduced)
                                              attribute = get(["attributes", attributeId])
                                              dataType = attribute["dataType"] || node["dataType"]
                                              variantType = attribute["variantType"] || node["variantType"]
                                              arrayLength = if (node["arrayLength"]), do: [%{"value" => node["arrayLength"]}], else: []
                                              Log.info("ChunkData: do: ReadRequest: variantType: " <> inspect variantType)
                                              value = case variantType do
                                                1 -> [%{"value" => reduced}]
                                                0x16 ->
                                                  body = reduced |> encode(dataType)
                                                  [%{
                                                    "TypeId" => node["14"],
                                                    "Encoding" => %{"value" => 1},
                                                    "Body" => [%{"Length" => %{"value" => byte_size(body.result)}, "value" => body.result}]
                                                  }]
                                                6 ->
                                                  cond do
                                                    is_list(reduced) -> reduced
                                                    is_map(reduced) -> [reduced]
                                                    true -> [%{"value" => reduced}]
                                                  end
                                                17 ->
                                                  cond do
                                                    is_map(reduced) -> [reduced]
                                                    true ->
                                                      case namespace do
                                                        "0" ->
                                                          [%{
                                                            "EncodingByte" => 1,
                                                            "Identifier" => %{"value" => reduced},
                                                            "Namespace" => %{"value" => 0},
                                                            "NamespaceUri" => [],
                                                            "ServerIndex" => []
                                                          }]
                                                        _ ->
                                                          [%{
                                                            "EncodingByte" => 3,
                                                            "Identifier" => %{"Length" => %{"value" => byte_size(reduced)}, "value" => reduced},
                                                            "Namespace" => %{"value" => namespace |> String.to_integer()},
                                                            "NamespaceUri" => [],
                                                            "ServerIndex" => []
                                                          }]
                                                      end
                                                  end
                                                20 ->
                                                  [%{
                                                    "NamespaceIndex" => %{"value" => namespace |> String.to_integer()},
                                                    "Name" => %{
                                                      "Length" => %{"value" => byte_size(reduced)},
                                                      "value" => reduced
                                                    }
                                                  }]
                                                21 ->
                                                  [%{
                                                    "EncodingMask" => %{"value" => 2},
                                                    "Locale" => [],
                                                    "Text" => [%{
                                                      "Length" => %{"value" => byte_size(reduced)},
                                                      "value" => reduced
                                                    }]
                                                  }]
                                                _ -> reduced
                                              end
                                              Log.info("ChunkData: do: ReadRequest: value: " <> inspect value)
                                              case timestampsToReturn do
                                                0 -> # Source timestamp
                                                  %{
                                                    "EncodingMask" => %{"value" => 0b101},
                                                    "SourceTimestamp" => sourceTimestamp
                                                  }
                                                1 -> # Server timestamp
                                                  %{
                                                    "EncodingMask" => %{"value" => 0b1001},
                                                    "ServerTimestamp" => serverTimestamp,
                                                  }
                                                2 -> # Both timestamp
                                                  %{
                                                    "EncodingMask" => %{"value" => 0b1101},
                                                    "ServerTimestamp" => serverTimestamp,
                                                    "SourceTimestamp" => sourceTimestamp
                                                  }
                                                3 -> # Neither timestamp
                                                  %{
                                                    "EncodingMask" => %{"value" => 0x01},
                                                  }
                                                _ -> # Neither timestamp
                                                  %{
                                                    "EncodingMask" => %{"value" => 0x01},
                                                  }
                                              end |> Map.merge(%{
                                                "Value" => [%{
                                                  "EncodingMask" => %{"value" => variantType},
                                                  "ArrayLength" => arrayLength,
                                                  "Value" => value,
                                                  "ArrayDimensionsLength" => [],
                                                  "ArrayDimensions" => [],
                                                }]
                                              })
                                          end
                                      end
                                    end)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 634},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => 0},
                                        "timestamp" => %{"value" => ((:os.system_time(:microsecond) * 10) + 116444736000000000)}
                                      },
                                      "resultLength" => %{"value" => length(results)},
                                      "results" => results,
                                      "diagnosticInfoLength" => %{"value" => -1},
                                      "diagnosticInfos" => []
                                    }, "ReadResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "ReadRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    subscriptionAcknowledgements = v["data"]["Body"]["subscriptionAcknowledgements"] || []
                                    subscriptionAcknowledgements |> Enum.each(fn x ->
                                      clear(["NotificationQueue", x["subscriptionId"]["value"] |> to_string(), x["sequenceNumber"]["value"] |> to_string()])
                                    end)
                                    publishId = count(["receivedPublishId"], 1) |> to_string()
                                    Log.info("PublishRequest: receivedPublishId: " <> inspect publishId)
                                    set(["PublishQueue", publishId], v["data"], flatten: true)
                                model:
                                  $ref: "PublishRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: BrowseRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    nodesToBrowse = v["data"]["Body"]["nodesToBrowse"] || []
                                    nodesToProcess = nodesToBrowse |> Enum.take(v["data"]["Body"]["nodeLength"]["value"])
                                    Log.info(nodesToProcess)
                                    results = nodesToProcess |> Enum.map(fn x ->
                                      nodeId = x["nodeId"]["Identifier"]["value"] |> to_string()
                                      referenceId = x["referenceTypeId"]["Identifier"]["value"] |> to_string()
                                      namespace = if (x["nodeId"]["Namespace"]["value"]), do: x["nodeId"]["Namespace"]["value"] |> to_string(), else: "0"
                                      encodingMask =
                                      case function("get_node", %{"namespace" => namespace, "nodeId" => nodeId}) do
                                        nil ->
                                          %{
                                            "continuationPoint" => %{"Length" => %{"value" => -1}, "value" => ""},
                                            "statusCode" => %{"value" => 0x80340000},
                                            "referenceLength" => %{"value" => 0},
                                            "References" => []
                                          }
                                        node ->
                                          references = function("get_reference_list", %{
                                            "namespace" => namespace,
                                            "node_id" => nodeId,
                                            "reference_id" => referenceId
                                          }) |> Enum.map(fn x ->
                                            Log.info("BrowseRequest: x: " <> inspect x)
                                            reference_node = function("get_node", %{"namespace" => x["namespace"], "nodeId" => x["nodeId"]})
                                            Log.info("BrowseRequest: reference_node: " <> inspect reference_node)
                                            node_id = case x["nodeIdType"] do
                                              "String" ->
                                                %{
                                                  "EncodingByte" => 3,
                                                  "Identifier" => %{"Length" => %{"value" => byte_size(x["nodeId"])}, "value" => x["nodeId"]},
                                                  "Namespace" => %{"value" => x["namespace"] |> String.to_integer()},
                                                  "NamespaceUri" => [],
                                                  "ServerIndex" => []
                                                }
                                              _ ->
                                                %{
                                                  "EncodingByte" => 1,
                                                  "Identifier" => %{"value" => x["nodeId"] |> String.to_integer()},
                                                  "Namespace" => %{"value" => x["namespace"] |> String.to_integer()},
                                                  "NamespaceUri" => [],
                                                  "ServerIndex" => []
                                                }
                                            end
                                            Log.info("BrowseRequest: node_id: " <> inspect node_id)
                                            %{
                                              "referenceTypeId" => %{
                                                "EncodingByte" => 1,
                                                "Identifier" => %{"value" => x["type"] |> String.to_integer()},
                                                "Namespace" => %{"value" => 0},
                                                "NamespaceUri" => [],
                                                "ServerIndex" => []
                                              },
                                              "isForward" => %{"value" => 1},
                                              "nodeId" => node_id,
                                              "browseName" => %{
                                                "NamespaceIndex" => %{"value" => 1},
                                                "Name" => %{
                                                  "Length" => %{"value" => byte_size(reference_node["3"])},
                                                  "value" => reference_node["3"]
                                                }
                                              },
                                              "displayName" => %{
                                                "EncodingMask" => %{"value" => 2},
                                                "Locale" => [],
                                                "Text" => [%{
                                                  "Length" => %{"value" => byte_size(reference_node["4"])},
                                                  "value" => reference_node["4"]
                                                }]
                                              },
                                              "nodeClass" => %{"value" => reference_node["2"]},
                                              "typeDefinition" => reference_node["14"]
                                            }
                                          end)
                                          %{
                                            "continuationPoint" => %{"Length" => %{"value" => -1}, "value" => ""},
                                            "statusCode" => %{"value" => 0},
                                            "referenceLength" => %{"value" => length(references)},
                                            "References" => references
                                          }
                                      end
                                    end)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 530},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "diagnosticInfoLength" => %{"value" => -1},
                                      "diagnosticInfos" => [],
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "resultLength" => %{"value" => length(results)},
                                      "results" => results
                                    }, "BrowseResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "BrowseRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: WriteRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    timestampsToReturn = v["data"]["Body"]["timestampsToReturn"]["value"]
                                    nodesToWrite = v["data"]["Body"]["nodesToWrite"] || []
                                    nodesToProcess = nodesToWrite |> Enum.take(v["data"]["Body"]["nodeLength"]["value"])
                                    results = nodesToProcess |> Enum.map(fn x ->
                                      Log.info("ChunkData: do: WriteRequest: x: " <> inspect x)
                                      # String?
                                      nodeId = x["nodeId"]["Identifier"]["value"]
                                      path = nodeId |> String.split(".")
                                      namespace = if (x["nodeId"]["Namespace"]["value"]), do: x["nodeId"]["Namespace"]["value"] |> to_string(), else: "0"
                                      value = (x["value"]["Value"] |> Enum.at(0))["Value"] |> Enum.at(0)
                                      set(["node", namespace, nodeId, "13"], value)
                                      emit("write", v |> Map.put("value", value) |> Map.put("path", path))
                                      %{"value" => 0}
                                    end)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 676},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "diagnosticInfoLength" => %{"value" => -1},
                                      "diagnosticInfos" => [],
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "resultLength" => %{"value" => length(results)},
                                      "results" => results
                                    }, "WriteResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "WriteRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    subscriptionId = v["data"]["Body"]["subscriptionId"]["value"]
                                    set(["subscriptions", subscriptionId |> to_string(), "pid"], execution_state.instance_pid)
                                    retransmitSequenceNumber = v["data"]["Body"]["retransmitSequenceNumber"]["value"]
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    notificationMessage = get(["NotificationQueue", subscriptionId |> to_string(), retransmitSequenceNumber |> to_string()])
                                    Log.info("RepublishRequest: notificationMessage: " <> inspect notificationMessage)
                                    serviceResult = if (notificationMessage), do: 0, else: 0x807B0000
                                    notificationMessage = notificationMessage || %{
                                      "dataLength" => %{"value" => 1},
                                      "notificationData" => [%{
                                        "Body" => [],
                                        "Encoding" => %{"value" => 0},
                                        "TypeId" => %{
                                          "EncodingByte" => 1,
                                          "Identifier" => %{"value" => 811},
                                          "Namespace" => %{"value" => 0},
                                          "NamespaceUri" => [],
                                          "ServerIndex" => []
                                        }
                                      }],
                                      "publishTime" => %{"value" => function("current_time")},
                                      "sequenceNumber" => %{"value" => retransmitSequenceNumber}
                                    }
                                    Log.info("RepublishRequest: notificationMessage: " <> inspect notificationMessage)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 835},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => serviceResult},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "notificationMessage" => notificationMessage
                                    }, "RepublishResponse")
                                    result = function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody))
                                    result |> respond()
                                model:
                                  $ref: "RepublishRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: CreateMonitoredItemsRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    itemsToCreate = v["data"]["Body"]["itemsToCreate"] || []
                                    itemsToProcess = itemsToCreate |> Enum.take(v["data"]["Body"]["itemsToCreateLength"]["value"])
                                    results = itemsToProcess |> Enum.map(fn x ->
                                      monitoredItemId = count(["monitoredItemId"], 1) |> to_string()
                                      set(["monitoredItem", monitoredItemId, "info"], x)
                                      set(["monitoredItem", monitoredItemId, "subscriptionInfo"], v["data"]["Body"]["subscriptionId"]["value"])
                                      %{
                                        "filterResult" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "monitoredItemId" => %{"value" => monitoredItemId |> String.to_integer()},
                                        "revisedQueueSize" => %{"value" => 1},
                                        "revisedSamplingInterval" => %{"value" => 1000},
                                        "statusCode" => %{"value" => 0}
                                      }
                                    end)
                                    Log.info("ChunkData: do: CreateMonitoredItemsRequest: " <> inspect v)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 754},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "resultLength" => %{"value" => length(results)},
                                      "results" => results,
                                      "diagnosticInfoLength" => %{"value" => -1},
                                      "diagnosticInfos" => []
                                    }, "CreateMonitoredItemsResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "CreateMonitoredItemsRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: ModifyMonitoredItemsRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    itemsToModify = v["data"]["Body"]["itemsToModify"] || []
                                    itemsToProcess = itemsToModify |> Enum.take(v["data"]["Body"]["itemsToModifyLength"]["value"])
                                    results = itemsToProcess |> Enum.map(fn x ->
                                      monitoredItemId = x["monitoredItemId"]["value"] |> to_string()
                                      set(["monitoredItem", monitoredItemId, "info"], x)
                                      set(["monitoredItem", monitoredItemId, "subscriptionInfo"], v["data"]["Body"]["subscriptionId"]["value"])
                                      %{
                                        "filterResult" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "monitoredItemId" => %{"value" => monitoredItemId |> String.to_integer()},
                                        "revisedQueueSize" => %{"value" => 1},
                                        "revisedSamplingInterval" => %{"value" => x["requestedParameters"]["samplingInterval"]["value"]},
                                        "statusCode" => %{"value" => 0}
                                      }
                                    end)
                                    Log.info("ChunkData: do: ModifyMonitoredItemsRequest: " <> inspect v)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 754},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "resultLength" => %{"value" => length(results)},
                                      "results" => results,
                                      "diagnosticInfoLength" => %{"value" => -1},
                                      "diagnosticInfos" => []
                                    }, "CreateMonitoredItemsResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "ModifyMonitoredItemsRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: DeleteMonitoredItemsRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    subscriptionId = v["data"]["Body"]["subscriptionId"] || []
                                    monitoredItemIds = v["data"]["Body"]["monitoredItemIds"] || []
                                    itemsToProcess = monitoredItemIds |> Enum.take(v["data"]["Body"]["monitoredItemIdsLength"]["value"])
                                    results = itemsToProcess |> Enum.map(fn x ->
                                      Log.info("ChunkData: do: DeleteMonitoredItemsRequest: x: " <> inspect x)
                                      monitoredItemId = x["value"] |> to_string()
                                      clear(["monitoredItem", monitoredItemId, "info"])
                                      clear(["monitoredItem", monitoredItemId, "subscriptionInfo"])
                                      %{"value" => 0}
                                    end)
                                    Log.info("ChunkData: do: DeleteMonitoredItemsRequest: " <> inspect v)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 784},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "resultLength" => %{"value" => length(results)},
                                      "results" => results,
                                      "diagnosticInfoLength" => %{"value" => -1},
                                      "diagnosticInfos" => []
                                    }, "DeleteMonitoredItemsResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "DeleteMonitoredItemsRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: CreateSubscriptionRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    subscriptionId = count("SubscriptionId", 1)
                                    revisedPublishingInterval = if (v["data"]["Body"]["requestedPublishingInterval"]["value"] < 100), do: 100, else: v["data"]["Body"]["requestedPublishingInterval"]["value"] |> Kernel.trunc()
                                    revisedLifetimeCount = if (v["data"]["Body"]["requestedLifeTimeCount"]["value"] < 3), do: 3, else: v["data"]["Body"]["requestedLifeTimeCount"]["value"]
                                    revisedMaxKeepAliveCount = if (v["data"]["Body"]["requestedMaxKeepAliveCount"]["value"] < 10), do: 10, else: v["data"]["Body"]["requestedMaxKeepAliveCount"]["value"]
                                    set(["connections", v["connection_info"], "subscriptions", subscriptionId |> to_string(), "pid"], execution_state.instance_pid)
                                    set(["subscriptions", subscriptionId |> to_string(), "pid"], execution_state.instance_pid)
                                    set(["subscriptions", subscriptionId |> to_string(), "publishingInterval"], revisedPublishingInterval)
                                    set(["subscriptions", subscriptionId |> to_string(), "lifeTimeCount"], revisedLifetimeCount)
                                    set(["subscriptions", subscriptionId |> to_string(), "maxKeepAliveCount"], revisedMaxKeepAliveCount)
                                    function("spawn_subscription_task",
                                      v["data"]["Body"]
                                      |> Map.put("revisedPublishingInterval", revisedPublishingInterval)
                                      |> Map.put("revisedLifetimeCount", revisedLifetimeCount)
                                      |> Map.put("revisedMaxKeepAliveCount", revisedMaxKeepAliveCount)
                                      |> Map.put("subscriptionId", subscriptionId)
                                    )
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 790},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "subscriptionId" => %{"value" => subscriptionId},
                                      "revisedPublishingInterval" => %{"value" => revisedPublishingInterval},
                                      "revisedLifetimeCount" => %{"value" => revisedLifetimeCount},
                                      "revisedMaxKeepAliveCount" => %{"value" => revisedMaxKeepAliveCount}
                                    }, "CreateSubscriptionResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "CreateSubscriptionRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: ModifySubscriptionRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    subscriptionId = v["data"]["Body"]["subscriptionId"]
                                    requestedPublishingInterval = if (v["data"]["Body"]["requestedPublishingInterval"]["value"] < 100), do: 100, else: v["data"]["Body"]["requestedPublishingInterval"]["value"] |> Kernel.trunc()
                                    requestedLifetimeCount = if (v["data"]["Body"]["requestedLifeTimeCount"]["value"] < 3), do: 3, else: v["data"]["Body"]["requestedLifeTimeCount"]["value"]
                                    requestedMaxKeepAliveCount = if (v["data"]["Body"]["requestedMaxKeepAliveCount"]["value"] < 10), do: 10, else: v["data"]["Body"]["requestedMaxKeepAliveCount"]["value"]
                                    set(["connections", v["connection_info"], "subscriptions", subscriptionId |> to_string(), "pid"], execution_state.instance_pid)
                                    set(["subscriptions", subscriptionId |> to_string(), "pid"], execution_state.instance_pid)
                                    set(["subscriptions", subscriptionId |> to_string(), "publishingInterval"], requestedPublishingInterval)
                                    set(["subscriptions", subscriptionId |> to_string(), "lifeTimeCount"], requestedLifetimeCount)
                                    set(["subscriptions", subscriptionId |> to_string(), "maxKeepAliveCount"], requestedMaxKeepAliveCount)
                                    # function("spawn_subscription_task",
                                    #   v["data"]["Body"]
                                    #   |> Map.put("requestedPublishingInterval", requestedPublishingInterval)
                                    #   |> Map.put("requestedLifetimeCount", requestedLifetimeCount)
                                    #   |> Map.put("requestedMaxKeepAliveCount", requestedMaxKeepAliveCount)
                                    #   |> Map.put("subscriptionId", subscriptionId)
                                    # )
                                    # need to change existing timer
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 796},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => -1},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "revisedPublishingInterval" => %{"value" => requestedPublishingInterval},
                                      "revisedLifetimeCount" => %{"value" => requestedLifetimeCount},
                                      "requestedMaxKeepAliveCount" => %{"value" => requestedMaxKeepAliveCount}
                                    }, "ModifySubscriptionResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "ModifySubscriptionRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: ActivateSessionRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 470},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => 0},
                                        "timestamp" => %{"value" => function("current_time")}
                                      },
                                      "serverNonce" => %{"Length" => %{"value" => -1}, "value" => []},
                                      "resultLength" => %{"value" => -1},
                                      "results" => [],
                                      "diagnosticInfoLength" => %{"value" => -1},
                                      "diagnosticInfo" => []
                                    }, "ActivateSessionResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "ActivateSessionRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: CloseSessionRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    deleteSubscriptions = v["data"]["Body"]["deleteSubscriptions"]["value"]
                                    clear(["connections", v["connection_info"]])
                                    Log.info("ChunkData: do: CloseSessionRequest: deleteSubscriptions: " <> inspect deleteSubscriptions)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 476},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => 0},
                                        "timestamp" => %{"value" => ((:os.system_time(:microsecond) * 10) + 116444736000000000)}
                                      }
                                    }, "CloseSessionResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "CloseSessionRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: CreateSessionRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    applicationUri = "urn:" <> get("address") <> ":OPCUA:EdgeHubServer"
                                    applicationUriLength = byte_size(applicationUri)
                                    discoveryUrl = "opc.tcp://" <> get("address") <> ":53530"
                                    discoveryUrlLength = byte_size(discoveryUrl)
                                    endpointUrl = "opc.tcp://" <> get("address") <> ":53530"
                                    endpointUrlength = byte_size(endpointUrl)
                                    data4 = count("Guid_Data4", 1)
                                    sessionName = v["data"]["Body"]["sessionName"]["value"]
                                    sessionId = "1-1-1-" <> inspect(data4)
                                    authenticationToken = count("authenticationToken", 1)
                                    set(["session", sessionId, "sessionName"], sessionName)
                                    set(["session", sessionId, "authenticationToken"], authenticationToken)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 464},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => 0},
                                        "timestamp" => %{"value" => ((:os.system_time(:microsecond) * 10) + 116444736000000000)}
                                      },
                                      "sessionId" => %{
                                        "EncodingByte" => 4,
                                        "Identifier" => %{"Data1" => 1, "Data2" => 1, "Data3" => 1, "Data4" => data4},
                                        "Namespace" => %{"value" => 1},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "authenticationToken" => %{
                                        "EncodingByte" => 2,
                                        "Identifier" => %{"value" => authenticationToken},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "revisedSessionTimeout" => %{"value" => 30000},
                                      "serverNonce" => %{"Length" => %{"value" => -1}, "value" => []},
                                      "serverCertificate" => %{
                                        "Length" => %{"value" => 1312},
                                        "value" => <<48, 130, 5, 28, 48, 130, 4, 4, 160, 3, 2, 1, 2, 2, 4, 91,
                                          235, 113, 21, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0,
                                          48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                          6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                          6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                          32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                          32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                          72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                          101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                          56, 74, 48, 30, 23, 13, 49, 56, 49, 49, 49, 52, 48, 48, 52, 57, 50,
                                          53, 90, 23, 13, 50, 51, 49, 49, 49, 51, 48, 48, 52, 57, 50, 53, 90,
                                          48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                          6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                          6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                          32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                          32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                          72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                          101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                          56, 74, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1,
                                          1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 195, 136,
                                          146, 135, 185, 227, 232, 34, 79, 9, 130, 22, 125, 147, 154, 138, 166,
                                          233, 144, 60, 44, 109, 9, 76, 251, 191, 156, 109, 84, 102, 168, 201,
                                          196, 241, 35, 153, 41, 79, 97, 30, 38, 199, 108, 107, 30, 223, 50,
                                          187, 226, 132, 215, 246, 32, 130, 164, 121, 28, 33, 32, 63, 182, 153,
                                          66, 204, 48, 199, 49, 84, 20, 115, 45, 79, 95, 101, 140, 93, 76, 55,
                                          30, 129, 45, 64, 100, 16, 125, 51, 223, 198, 100, 104, 110, 187, 248,
                                          14, 74, 122, 90, 21, 104, 251, 83, 66, 111, 147, 136, 122, 111, 172,
                                          132, 78, 203, 212, 45, 162, 185, 227, 51, 73, 64, 65, 148, 21, 67,
                                          180, 203, 241, 170, 41, 57, 195, 80, 141, 77, 177, 99, 40, 90, 60, 71,
                                          252, 59, 153, 207, 227, 162, 254, 31, 214, 108, 155, 221, 28, 122,
                                          246, 185, 106, 55, 242, 155, 238, 226, 158, 123, 202, 21, 245, 27,
                                          120, 207, 59, 42, 243, 117, 129, 198, 49, 253, 96, 61, 88, 250, 152,
                                          182, 66, 17, 11, 167, 212, 66, 141, 176, 0, 154, 104, 182, 104, 139,
                                          92, 107, 151, 15, 131, 16, 186, 200, 254, 120, 33, 107, 173, 99, 173,
                                          239, 152, 193, 243, 193, 218, 169, 196, 139, 90, 128, 241, 92, 214,
                                          212, 234, 198, 17, 35, 142, 59, 218, 63, 21, 242, 163, 198, 68, 8,
                                          160, 233, 114, 143, 150, 94, 230, 64, 164, 116, 82, 10, 122, 105, 45,
                                          2, 3, 1, 0, 1, 163, 130, 1, 170, 48, 130, 1, 166, 48, 18, 6, 3, 85,
                                          29, 19, 1, 1, 255, 4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 75, 6, 9, 96,
                                          134, 72, 1, 134, 248, 66, 1, 13, 4, 62, 22, 60, 34, 71, 101, 110, 101,
                                          114, 97, 116, 101, 100, 32, 119, 105, 116, 104, 32, 85, 110, 105, 102,
                                          105, 101, 100, 32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32,
                                          65, 110, 115, 105, 32, 67, 32, 83, 68, 75, 32, 117, 115, 105, 110,
                                          103, 32, 79, 112, 101, 110, 83, 83, 76, 34, 48, 29, 6, 3, 85, 29, 14,
                                          4, 22, 4, 20, 53, 211, 255, 27, 182, 155, 179, 201, 89, 9, 180, 76,
                                          63, 195, 66, 9, 131, 11, 243, 168, 48, 129, 166, 6, 3, 85, 29, 35, 4,
                                          129, 158, 48, 129, 155, 128, 20, 53, 211, 255, 27, 182, 155, 179, 201,
                                          89, 9, 180, 76, 63, 195, 66, 9, 131, 11, 243, 168, 161, 125, 164, 123,
                                          48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                          6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                          6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                          32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                          32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                          72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                          101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                          56, 74, 130, 4, 91, 235, 113, 21, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255,
                                          4, 4, 3, 2, 2, 244, 48, 22, 6, 3, 85, 29, 37, 1, 1, 255, 4, 12, 48,
                                          10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 48, 83, 6, 3, 85, 29, 17, 4, 76,
                                          48, 74, 134, 55, 117, 114, 110, 58, 68, 69, 83, 75, 84, 79, 80, 45,
                                          77, 51, 73, 86, 82, 56, 74, 58, 85, 110, 105, 102, 105, 101, 100, 65,
                                          117, 116, 111, 109, 97, 116, 105, 111, 110, 58, 85, 97, 68, 101, 109,
                                          111, 83, 101, 114, 118, 101, 114, 65, 110, 115, 105, 67, 130, 15, 68,
                                          69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82, 56, 74, 48, 13, 6, 9,
                                          42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 14, 140,
                                          216, 249, 210, 213, 125, 172, 66, 132, 36, 50, 57, 205, 221, 190, 133,
                                          37, 40, 54, 39, 227, 13, 214, 210, 223, 27, 163, 46, 178, 120, 218,
                                          88, 154, 60, 90, 253, 136, 188, 64, 226, 75, 147, 35, 92, 195, 99, 13,
                                          252, 75, 105, 93, 4, 189, 213, 24, 79, 173, 194, 44, 194, 246, 212,
                                          223, 123, 173, 138, 22, 68, 202, 52, 206, 18, 242, 198, 227, 248, 227,
                                          59, 126, 93, 57, 22, 112, 158, 68, 122, 162, 198, 211, 186, 132, 216,
                                          102, 87, 32, 8, 125, 78, 129, 110, 220, 202, 181, 98, 36, 72, 143,
                                          225, 75, 205, 217, 253, 134, 11, 24, 104, 75, 248, 253, 149, 137, 184,
                                          234, 46, 24, 126, 184, 97, 120, 162, 109, 33, 146, 65, 165, 78, 90,
                                          247, 129, 144, 121, 255, 62, 18, 107, 230, 193, 182, 237, 149, 70, 13,
                                          60, 102, 107, 97, 184, 98, 122, 160, 40, 93, 224, 202, 160, 101, 48,
                                          88, 173, 209, 186, 204, 4, 24, 213, 236, 80, 157, 175, 240, 150, 231,
                                          150, 163, 3, 14, 206, 40, 173, 95, 234, 110, 86, 8, 9, 51, 218, 2, 31,
                                          162, 28, 238, 218, 112, 13, 212, 15, 19, 212, 2, 120, 115, 37, 207,
                                          181, 73, 65, 248, 54, 43, 163, 81, 134, 16, 171, 95, 165, 221, 95,
                                          249, 101, 254, 14, 208, 19, 163, 60, 121, 236, 17, 208, 160, 21, 192,
                                          117, 14, 115, 209, 108, 13, 41, 13, 182, 205, 153>>
                                      },
                                      "serverEndpointLength" => %{"value" => 1},
                                      "serverEndpoints" => [
                                        %{
                                          "endpointUrl" => %{
                                            "Length" => %{"value" => endpointUrlength},
                                            "value" => endpointUrl
                                          },
                                          "server" => %{
                                            "applicationName" => %{
                                              "EncodingMask" => %{"value" => 3},
                                              "Locale" => [%{"Length" => %{"value" => 0}, "value" => ""}],
                                              "Text" => [
                                                %{"Length" => %{"value" => 13}, "value" => "EdgeHubServer"}
                                              ]
                                            },
                                            "applicationType" => %{"value" => 0},
                                            "applicationUri" => %{
                                              "Length" => %{"value" => applicationUriLength},
                                              "value" => applicationUri
                                            },
                                            "discoveryProfileUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                            "discoveryUrlLength" => %{"value" => 1},
                                            "discoveryUrls" => [
                                              %{
                                                "Length" => %{"value" => discoveryUrlLength},
                                                "value" => discoveryUrl
                                              }
                                            ],
                                            "gatewayServerUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                            "productUri" => %{
                                              "Length" => %{"value" => 38},
                                              "value" => "urn:interactor.com:OPCUA:EdgeHubServer"
                                            }
                                          },
                                          "serverCertificate" => %{
                                            "Length" => %{"value" => 1312},
                                            "value" => <<48, 130, 5, 28, 48, 130, 4, 4, 160, 3, 2, 1, 2, 2, 4, 91,
                                              235, 113, 21, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0,
                                              48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                              6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                              6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                              32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                              32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                              72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                              101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                              56, 74, 48, 30, 23, 13, 49, 56, 49, 49, 49, 52, 48, 48, 52, 57, 50,
                                              53, 90, 23, 13, 50, 51, 49, 49, 49, 51, 48, 48, 52, 57, 50, 53, 90,
                                              48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                              6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                              6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                              32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                              32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                              72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                              101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                              56, 74, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1,
                                              1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 195, 136,
                                              146, 135, 185, 227, 232, 34, 79, 9, 130, 22, 125, 147, 154, 138, 166,
                                              233, 144, 60, 44, 109, 9, 76, 251, 191, 156, 109, 84, 102, 168, 201,
                                              196, 241, 35, 153, 41, 79, 97, 30, 38, 199, 108, 107, 30, 223, 50,
                                              187, 226, 132, 215, 246, 32, 130, 164, 121, 28, 33, 32, 63, 182, 153,
                                              66, 204, 48, 199, 49, 84, 20, 115, 45, 79, 95, 101, 140, 93, 76, 55,
                                              30, 129, 45, 64, 100, 16, 125, 51, 223, 198, 100, 104, 110, 187, 248,
                                              14, 74, 122, 90, 21, 104, 251, 83, 66, 111, 147, 136, 122, 111, 172,
                                              132, 78, 203, 212, 45, 162, 185, 227, 51, 73, 64, 65, 148, 21, 67,
                                              180, 203, 241, 170, 41, 57, 195, 80, 141, 77, 177, 99, 40, 90, 60, 71,
                                              252, 59, 153, 207, 227, 162, 254, 31, 214, 108, 155, 221, 28, 122,
                                              246, 185, 106, 55, 242, 155, 238, 226, 158, 123, 202, 21, 245, 27,
                                              120, 207, 59, 42, 243, 117, 129, 198, 49, 253, 96, 61, 88, 250, 152,
                                              182, 66, 17, 11, 167, 212, 66, 141, 176, 0, 154, 104, 182, 104, 139,
                                              92, 107, 151, 15, 131, 16, 186, 200, 254, 120, 33, 107, 173, 99, 173,
                                              239, 152, 193, 243, 193, 218, 169, 196, 139, 90, 128, 241, 92, 214,
                                              212, 234, 198, 17, 35, 142, 59, 218, 63, 21, 242, 163, 198, 68, 8,
                                              160, 233, 114, 143, 150, 94, 230, 64, 164, 116, 82, 10, 122, 105, 45,
                                              2, 3, 1, 0, 1, 163, 130, 1, 170, 48, 130, 1, 166, 48, 18, 6, 3, 85,
                                              29, 19, 1, 1, 255, 4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 75, 6, 9, 96,
                                              134, 72, 1, 134, 248, 66, 1, 13, 4, 62, 22, 60, 34, 71, 101, 110, 101,
                                              114, 97, 116, 101, 100, 32, 119, 105, 116, 104, 32, 85, 110, 105, 102,
                                              105, 101, 100, 32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32,
                                              65, 110, 115, 105, 32, 67, 32, 83, 68, 75, 32, 117, 115, 105, 110,
                                              103, 32, 79, 112, 101, 110, 83, 83, 76, 34, 48, 29, 6, 3, 85, 29, 14,
                                              4, 22, 4, 20, 53, 211, 255, 27, 182, 155, 179, 201, 89, 9, 180, 76,
                                              63, 195, 66, 9, 131, 11, 243, 168, 48, 129, 166, 6, 3, 85, 29, 35, 4,
                                              129, 158, 48, 129, 155, 128, 20, 53, 211, 255, 27, 182, 155, 179, 201,
                                              89, 9, 180, 76, 63, 195, 66, 9, 131, 11, 243, 168, 161, 125, 164, 123,
                                              48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                              6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                              6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                              32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                              32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                              72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                              101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                              56, 74, 130, 4, 91, 235, 113, 21, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255,
                                              4, 4, 3, 2, 2, 244, 48, 22, 6, 3, 85, 29, 37, 1, 1, 255, 4, 12, 48,
                                              10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 48, 83, 6, 3, 85, 29, 17, 4, 76,
                                              48, 74, 134, 55, 117, 114, 110, 58, 68, 69, 83, 75, 84, 79, 80, 45,
                                              77, 51, 73, 86, 82, 56, 74, 58, 85, 110, 105, 102, 105, 101, 100, 65,
                                              117, 116, 111, 109, 97, 116, 105, 111, 110, 58, 85, 97, 68, 101, 109,
                                              111, 83, 101, 114, 118, 101, 114, 65, 110, 115, 105, 67, 130, 15, 68,
                                              69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82, 56, 74, 48, 13, 6, 9,
                                              42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 14, 140,
                                              216, 249, 210, 213, 125, 172, 66, 132, 36, 50, 57, 205, 221, 190, 133,
                                              37, 40, 54, 39, 227, 13, 214, 210, 223, 27, 163, 46, 178, 120, 218,
                                              88, 154, 60, 90, 253, 136, 188, 64, 226, 75, 147, 35, 92, 195, 99, 13,
                                              252, 75, 105, 93, 4, 189, 213, 24, 79, 173, 194, 44, 194, 246, 212,
                                              223, 123, 173, 138, 22, 68, 202, 52, 206, 18, 242, 198, 227, 248, 227,
                                              59, 126, 93, 57, 22, 112, 158, 68, 122, 162, 198, 211, 186, 132, 216,
                                              102, 87, 32, 8, 125, 78, 129, 110, 220, 202, 181, 98, 36, 72, 143,
                                              225, 75, 205, 217, 253, 134, 11, 24, 104, 75, 248, 253, 149, 137, 184,
                                              234, 46, 24, 126, 184, 97, 120, 162, 109, 33, 146, 65, 165, 78, 90,
                                              247, 129, 144, 121, 255, 62, 18, 107, 230, 193, 182, 237, 149, 70, 13,
                                              60, 102, 107, 97, 184, 98, 122, 160, 40, 93, 224, 202, 160, 101, 48,
                                              88, 173, 209, 186, 204, 4, 24, 213, 236, 80, 157, 175, 240, 150, 231,
                                              150, 163, 3, 14, 206, 40, 173, 95, 234, 110, 86, 8, 9, 51, 218, 2, 31,
                                              162, 28, 238, 218, 112, 13, 212, 15, 19, 212, 2, 120, 115, 37, 207,
                                              181, 73, 65, 248, 54, 43, 163, 81, 134, 16, 171, 95, 165, 221, 95,
                                              249, 101, 254, 14, 208, 19, 163, 60, 121, 236, 17, 208, 160, 21, 192,
                                              117, 14, 115, 209, 108, 13, 41, 13, 182, 205, 153>>
                                          },
                                          "MessageSecurityMode" => %{"value" => 1},
                                          "securityPolicyUri" => %{
                                            "Length" => %{"value" => 47},
                                            "value" => "http://opcfoundation.org/UA/SecurityPolicy#None"
                                          },
                                          "tokenLength" => %{"value" => 1},
                                          "userIdentityTokens" => [
                                            %{
                                              "issuedTokenType" => %{"Length" => %{"value" => -1}, "value" => ""},
                                              "issuerEndpointUrl" => %{"Length" => %{"value" => -1}, "value" => ""},
                                              "policyId" => %{
                                                "Length" => %{"value" => 9},
                                                "value" => "anonymous"
                                              },
                                              "securityPolicyUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                              "tokenType" => %{"value" => 0}
                                            }
                                          ],
                                          "transportProfileUri" => %{
                                            "Length" => %{"value" => 65},
                                            "value" => "http://opcfoundation.org/UA-Profile/Transport/uatcp-uasc-uabinary"
                                          },
                                          "securityLevel" => %{"value" => 0}
                                        }
                                      ],
                                      "certificateLength" => %{"value" => 0},
                                      "serverSoftwareCertificates" => [],
                                      "serverSignature" => %{
                                        "algorithm" => %{"Length" => %{"value" => -1}, "value" => <<>>},
                                        "signature" => %{"Length" => %{"value" => -1}, "value" => []},
                                      },
                                      "maxRequestMessageSize" => %{"value" => 0},
                                    }, "CreateSessionResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "CreateSessionRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: FindServersRequest: " <> inspect v)
                                    applicationUri = "urn:" <> get("address") <> ":OPCUA:EdgeHubServer"
                                    applicationUriLength = byte_size(applicationUri)
                                    discoveryUrl = "opc.tcp://" <> get("address") <> ":53530"
                                    discoveryUrlLength = byte_size(discoveryUrl)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 425},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => 0},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => 0},
                                        "timestamp" => %{"value" => ((:os.system_time(:microsecond) * 10) + 116444736000000000)}
                                      },
                                      "serverLength" => %{"value" => 1},
                                      "servers" => [
                                        %{
                                          "applicationName" => %{
                                            "EncodingMask" => %{"value" => 3},
                                            "Locale" => [%{"Length" => %{"value" => 0}, "value" => ""}],
                                            "Text" => [
                                              %{"Length" => %{"value" => 13}, "value" => "EdgeHubServer"}
                                            ]
                                          },
                                          "applicationType" => %{"value" => 0},
                                          "applicationUri" => %{
                                            "Length" => %{"value" => applicationUriLength},
                                            "value" => applicationUri
                                          },
                                          "discoveryProfileUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                          "discoveryUrlLength" => %{"value" => 1},
                                          "discoveryUrls" => [
                                            %{
                                              "Length" => %{"value" => discoveryUrlLength},
                                              "value" => discoveryUrl
                                            }
                                          ],
                                          "gatewayServerUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                          "productUri" => %{
                                            "Length" => %{"value" => 38},
                                            "value" => "urn:interactor.com:OPCUA:EdgeHubServer"
                                          }
                                        }
                                      ]
                                    }, "FindServersResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "FindServersRequest"
                              - do:
                                  $action: "elixir"
                                  value: |
                                    Log.info("ChunkData: do: GetEndpointsRequest: " <> inspect v)
                                    requestHandle = v["data"]["Body"]["requestHeader"]["requestHandle"]["value"]
                                    applicationUri = "urn:" <> get("address") <> ":OPCUA:EdgeHubServer"
                                    applicationUriLength = byte_size(applicationUri)
                                    discoveryUrl = "opc.tcp://" <> get("address") <> ":53530"
                                    discoveryUrlLength = byte_size(discoveryUrl)
                                    endpointUrl = "opc.tcp://" <> get("address") <> ":53530"
                                    endpointUrlength = byte_size(endpointUrl)
                                    encodedBody = encode(%{
                                      "TypeId" => %{
                                        "EncodingByte" => 1,
                                        "Identifier" => %{"value" => 431},
                                        "Namespace" => %{"value" => 0},
                                        "NamespaceUri" => [],
                                        "ServerIndex" => []
                                      },
                                      "responseHeader" => %{
                                        "additionalHeader" => %{
                                          "Body" => [],
                                          "Encoding" => %{"value" => 0},
                                          "TypeId" => %{
                                            "EncodingByte" => 0,
                                            "Identifier" => %{"value" => 0},
                                            "NamespaceUri" => [],
                                            "ServerIndex" => []
                                          }
                                        },
                                        "requestHandle" => %{"value" => requestHandle},
                                        "serviceDiagnostics" => %{
                                          "AdditionalInfo" => [],
                                          "EncodingMask" => %{"value" => 0},
                                          "InnerDiagnosticInfo" => [],
                                          "InnerStatusCode" => [],
                                          "Locale" => [],
                                          "LocalizedText" => [],
                                          "NamespaceUri" => [],
                                          "SymbolicId" => []
                                        },
                                        "serviceResult" => %{"value" => 0},
                                        "stringTable" => [],
                                        "stringTableLength" => %{"value" => 0},
                                        "timestamp" => %{"value" => ((:os.system_time(:microsecond) * 10) + 116444736000000000)}
                                      },
                                      "endpointLength" => %{"value" => 1},
                                      "Endpoints" => [
                                        %{
                                          "endpointUrl" => %{
                                            "Length" => %{"value" => endpointUrlength},
                                            "value" => endpointUrl
                                          },
                                          "server" => %{
                                            "applicationName" => %{
                                              "EncodingMask" => %{"value" => 3},
                                              "Locale" => [%{"Length" => %{"value" => 0}, "value" => ""}],
                                              "Text" => [
                                                %{"Length" => %{"value" => 13}, "value" => "EdgeHubServer"}
                                              ]
                                            },
                                            "applicationType" => %{"value" => 0},
                                            "applicationUri" => %{
                                              "Length" => %{"value" => applicationUriLength},
                                              "value" => applicationUri
                                            },
                                            "discoveryProfileUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                            "discoveryUrlLength" => %{"value" => 1},
                                            "discoveryUrls" => [
                                              %{
                                                "Length" => %{"value" => discoveryUrlLength},
                                                "value" => discoveryUrl
                                              }
                                            ],
                                            "gatewayServerUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                            "productUri" => %{
                                              "Length" => %{"value" => 38},
                                              "value" => "urn:interactor.com:OPCUA:EdgeHubServer"
                                            }
                                          },
                                          "serverCertificate" => %{
                                            "Length" => %{"value" => 1312},
                                            "value" => <<48, 130, 5, 28, 48, 130, 4, 4, 160, 3, 2, 1, 2, 2, 4, 91,
                                              235, 113, 21, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0,
                                              48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                              6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                              6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                              32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                              32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                              72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                              101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                              56, 74, 48, 30, 23, 13, 49, 56, 49, 49, 49, 52, 48, 48, 52, 57, 50,
                                              53, 90, 23, 13, 50, 51, 49, 49, 49, 51, 48, 48, 52, 57, 50, 53, 90,
                                              48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                              6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                              6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                              32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                              32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                              72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                              101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                              56, 74, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1,
                                              1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 195, 136,
                                              146, 135, 185, 227, 232, 34, 79, 9, 130, 22, 125, 147, 154, 138, 166,
                                              233, 144, 60, 44, 109, 9, 76, 251, 191, 156, 109, 84, 102, 168, 201,
                                              196, 241, 35, 153, 41, 79, 97, 30, 38, 199, 108, 107, 30, 223, 50,
                                              187, 226, 132, 215, 246, 32, 130, 164, 121, 28, 33, 32, 63, 182, 153,
                                              66, 204, 48, 199, 49, 84, 20, 115, 45, 79, 95, 101, 140, 93, 76, 55,
                                              30, 129, 45, 64, 100, 16, 125, 51, 223, 198, 100, 104, 110, 187, 248,
                                              14, 74, 122, 90, 21, 104, 251, 83, 66, 111, 147, 136, 122, 111, 172,
                                              132, 78, 203, 212, 45, 162, 185, 227, 51, 73, 64, 65, 148, 21, 67,
                                              180, 203, 241, 170, 41, 57, 195, 80, 141, 77, 177, 99, 40, 90, 60, 71,
                                              252, 59, 153, 207, 227, 162, 254, 31, 214, 108, 155, 221, 28, 122,
                                              246, 185, 106, 55, 242, 155, 238, 226, 158, 123, 202, 21, 245, 27,
                                              120, 207, 59, 42, 243, 117, 129, 198, 49, 253, 96, 61, 88, 250, 152,
                                              182, 66, 17, 11, 167, 212, 66, 141, 176, 0, 154, 104, 182, 104, 139,
                                              92, 107, 151, 15, 131, 16, 186, 200, 254, 120, 33, 107, 173, 99, 173,
                                              239, 152, 193, 243, 193, 218, 169, 196, 139, 90, 128, 241, 92, 214,
                                              212, 234, 198, 17, 35, 142, 59, 218, 63, 21, 242, 163, 198, 68, 8,
                                              160, 233, 114, 143, 150, 94, 230, 64, 164, 116, 82, 10, 122, 105, 45,
                                              2, 3, 1, 0, 1, 163, 130, 1, 170, 48, 130, 1, 166, 48, 18, 6, 3, 85,
                                              29, 19, 1, 1, 255, 4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 75, 6, 9, 96,
                                              134, 72, 1, 134, 248, 66, 1, 13, 4, 62, 22, 60, 34, 71, 101, 110, 101,
                                              114, 97, 116, 101, 100, 32, 119, 105, 116, 104, 32, 85, 110, 105, 102,
                                              105, 101, 100, 32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32,
                                              65, 110, 115, 105, 32, 67, 32, 83, 68, 75, 32, 117, 115, 105, 110,
                                              103, 32, 79, 112, 101, 110, 83, 83, 76, 34, 48, 29, 6, 3, 85, 29, 14,
                                              4, 22, 4, 20, 53, 211, 255, 27, 182, 155, 179, 201, 89, 9, 180, 76,
                                              63, 195, 66, 9, 131, 11, 243, 168, 48, 129, 166, 6, 3, 85, 29, 35, 4,
                                              129, 158, 48, 129, 155, 128, 20, 53, 211, 255, 27, 182, 155, 179, 201,
                                              89, 9, 180, 76, 63, 195, 66, 9, 131, 11, 243, 168, 161, 125, 164, 123,
                                              48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 68, 69, 49, 16, 48, 14,
                                              6, 3, 85, 4, 8, 12, 7, 66, 97, 118, 97, 114, 105, 97, 49, 18, 48, 16,
                                              6, 3, 85, 4, 7, 12, 9, 78, 117, 114, 101, 109, 98, 101, 114, 103, 49,
                                              32, 48, 30, 6, 3, 85, 4, 10, 12, 23, 85, 110, 105, 102, 105, 101, 100,
                                              32, 65, 117, 116, 111, 109, 97, 116, 105, 111, 110, 32, 71, 109, 98,
                                              72, 49, 34, 48, 32, 6, 3, 85, 4, 3, 12, 25, 85, 97, 83, 101, 114, 118,
                                              101, 114, 67, 64, 68, 69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82,
                                              56, 74, 130, 4, 91, 235, 113, 21, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255,
                                              4, 4, 3, 2, 2, 244, 48, 22, 6, 3, 85, 29, 37, 1, 1, 255, 4, 12, 48,
                                              10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 48, 83, 6, 3, 85, 29, 17, 4, 76,
                                              48, 74, 134, 55, 117, 114, 110, 58, 68, 69, 83, 75, 84, 79, 80, 45,
                                              77, 51, 73, 86, 82, 56, 74, 58, 85, 110, 105, 102, 105, 101, 100, 65,
                                              117, 116, 111, 109, 97, 116, 105, 111, 110, 58, 85, 97, 68, 101, 109,
                                              111, 83, 101, 114, 118, 101, 114, 65, 110, 115, 105, 67, 130, 15, 68,
                                              69, 83, 75, 84, 79, 80, 45, 77, 51, 73, 86, 82, 56, 74, 48, 13, 6, 9,
                                              42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 14, 140,
                                              216, 249, 210, 213, 125, 172, 66, 132, 36, 50, 57, 205, 221, 190, 133,
                                              37, 40, 54, 39, 227, 13, 214, 210, 223, 27, 163, 46, 178, 120, 218,
                                              88, 154, 60, 90, 253, 136, 188, 64, 226, 75, 147, 35, 92, 195, 99, 13,
                                              252, 75, 105, 93, 4, 189, 213, 24, 79, 173, 194, 44, 194, 246, 212,
                                              223, 123, 173, 138, 22, 68, 202, 52, 206, 18, 242, 198, 227, 248, 227,
                                              59, 126, 93, 57, 22, 112, 158, 68, 122, 162, 198, 211, 186, 132, 216,
                                              102, 87, 32, 8, 125, 78, 129, 110, 220, 202, 181, 98, 36, 72, 143,
                                              225, 75, 205, 217, 253, 134, 11, 24, 104, 75, 248, 253, 149, 137, 184,
                                              234, 46, 24, 126, 184, 97, 120, 162, 109, 33, 146, 65, 165, 78, 90,
                                              247, 129, 144, 121, 255, 62, 18, 107, 230, 193, 182, 237, 149, 70, 13,
                                              60, 102, 107, 97, 184, 98, 122, 160, 40, 93, 224, 202, 160, 101, 48,
                                              88, 173, 209, 186, 204, 4, 24, 213, 236, 80, 157, 175, 240, 150, 231,
                                              150, 163, 3, 14, 206, 40, 173, 95, 234, 110, 86, 8, 9, 51, 218, 2, 31,
                                              162, 28, 238, 218, 112, 13, 212, 15, 19, 212, 2, 120, 115, 37, 207,
                                              181, 73, 65, 248, 54, 43, 163, 81, 134, 16, 171, 95, 165, 221, 95,
                                              249, 101, 254, 14, 208, 19, 163, 60, 121, 236, 17, 208, 160, 21, 192,
                                              117, 14, 115, 209, 108, 13, 41, 13, 182, 205, 153>>
                                          },
                                          "MessageSecurityMode" => %{"value" => 1},
                                          "securityPolicyUri" => %{
                                            "Length" => %{"value" => 47},
                                            "value" => "http://opcfoundation.org/UA/SecurityPolicy#None"
                                          },
                                          "tokenLength" => %{"value" => 1},
                                          "userIdentityTokens" => [
                                            %{
                                              "issuedTokenType" => %{"Length" => %{"value" => -1}, "value" => ""},
                                              "issuerEndpointUrl" => %{"Length" => %{"value" => -1}, "value" => ""},
                                              "policyId" => %{
                                                "Length" => %{"value" => 9},
                                                "value" => "anonymous"
                                              },
                                              "securityPolicyUri" => %{"Length" => %{"value" => -1}, "value" => ""},
                                              "tokenType" => %{"value" => 0}
                                            }
                                          ],
                                          "transportProfileUri" => %{
                                            "Length" => %{"value" => 65},
                                            "value" => "http://opcfoundation.org/UA-Profile/Transport/uatcp-uasc-uabinary"
                                          },
                                          "securityLevel" => %{"value" => 0}
                                        }
                                      ]
                                    }, "GetEndpointsResponse")
                                    function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody)) |> respond()
                                model:
                                  $ref: "GetEndpointsRequest"
                model:
                  $ref: "ChunkData"
              - do:
                  $action: "elixir"
                  value: |
                    encoded = encode(%{
                      "MaxChunkCount" => %{"value" => 0},
                      "MaxMessageSize" => %{"value" => 0},
                      "ProtocolVersion" => %{"value" => 0},
                      "ReceiveBufferSize" => %{"value" => 8196},
                      "SendBufferSize" => %{"value" => 8196}
                    }, "Acknowledge")
                    respond(encoded.result)
                model:
                  $ref: "Hello"
              - do:
                  $action: "elixir"
                  value: |
                    secureChannelId = count("SecureChannelId", 1)
                    set(["SecureChannels", secureChannelId |> to_string()], v["data"])
                    encoded = encode(%{
                      "TypeId" => %{
                        "EncodingByte" => 1,
                        "Identifier" => %{"value" => 449},
                        "Namespace" => %{"value" => 0},
                        "NamespaceUri" => [],
                        "ServerIndex" => []
                      },
                      "header" => %{
                        "IsFinal" => "F",
                        "MessageSize" => %{"value" => 135},
                        "ReceiverCertificateThumbprint" => %{
                          "Length" => %{"value" => -1},
                          "value" => ""
                        },
                        "RequestId" => %{"value" => 1},
                        "SecureChannelId" => %{"value" => secureChannelId},
                        "SecurityPolicyUri" => %{
                          "Length" => %{"value" => byte_size(v["data"]["header"]["SecurityPolicyUri"]["value"])},
                          "value" => v["data"]["header"]["SecurityPolicyUri"]["value"]
                        },
                        "SenderCertificate" => %{"Length" => %{"value" => -1}, "value" => ""},
                        "SequenceNumber" => %{"value" => count("SequenceNumber", 1)}
                      },
                      "responseHeader" => %{
                        "additionalHeader" => %{
                          "Body" => [],
                          "Encoding" => %{"value" => 0},
                          "TypeId" => %{
                            "EncodingByte" => 0,
                            "Identifier" => %{"value" => 0},
                            "NamespaceUri" => [],
                            "ServerIndex" => []
                          }
                        },
                        "requestHandle" => %{"value" => 0},
                        "serviceDiagnostics" => %{
                          "AdditionalInfo" => [],
                          "EncodingMask" => %{"value" => 0},
                          "InnerDiagnosticInfo" => [],
                          "InnerStatusCode" => [],
                          "Locale" => [],
                          "LocalizedText" => [],
                          "NamespaceUri" => [],
                          "SymbolicId" => []
                        },
                        "serviceResult" => %{"value" => 0},
                        "stringTable" => [],
                        "stringTableLength" => %{"value" => -1},
                        "timestamp" => %{"value" => 0}
                      },
                      "securityToken" => %{
                        "channelId" => %{"value" => secureChannelId},
                        "createdAt" => %{"value" => ((:os.system_time(:microsecond) * 10) + 116444736000000000)},
                        "revisedLifetime" => %{"value" => 3600000},
                        "tokenId" => %{"value" => count("TokenId", 1)}
                      },
                      "serverNonce" => %{"Length" => %{"value" => 0}, "value" => []},
                      "serverProtocolVersion" => %{"value" => 0}
                    }, "OpenSecureChannelResponse")
                    respond(encoded.result)
                model:
                  $ref: "OpenSecureChannelRequest"
              - do:
                  $action: "elixir"
                  value: |
                    Log.info("CloseSecureChannelRequest: " <> inspect v)
                    secureChannelId = v["data"]["MessageHeader"]["SecureChannelId"]["value"]
                    clear(["SecureChannels", secureChannelId |> to_string()])
                    requestHandle = v["data"]["requestHeader"]["requestHandle"]["value"]
                    encodedBody = encode(%{
                      "TypeId" => %{
                        "EncodingByte" => 1,
                        "Identifier" => %{"value" => 455},
                        "Namespace" => %{"value" => 0},
                        "NamespaceUri" => [],
                        "ServerIndex" => []
                      },
                      "responseHeader" => %{
                        "additionalHeader" => %{
                          "Body" => [],
                          "Encoding" => %{"value" => 0},
                          "TypeId" => %{
                            "EncodingByte" => 0,
                            "Identifier" => %{"value" => 0},
                            "NamespaceUri" => [],
                            "ServerIndex" => []
                          }
                        },
                        "requestHandle" => %{"value" => requestHandle},
                        "serviceDiagnostics" => %{
                          "AdditionalInfo" => [],
                          "EncodingMask" => %{"value" => 0},
                          "InnerDiagnosticInfo" => [],
                          "InnerStatusCode" => [],
                          "Locale" => [],
                          "LocalizedText" => [],
                          "NamespaceUri" => [],
                          "SymbolicId" => []
                        },
                        "serviceResult" => %{"value" => 0},
                        "stringTable" => [],
                        "stringTableLength" => %{"value" => -1},
                        "timestamp" => %{"value" => 0}
                      }
                    }, "CloseSecureChannelResponse")
                    data = function("create_message", v["data"] |> Map.put("_encodedBody", encodedBody))
                    data  |> respond()
                model:
                  $ref: "CloseSecureChannelRequest"
        use: "tcp server"
    model:
      Acknowledge:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Header"
            name: "Header"
            overrides:
              MessageSize:
                value:
                  default: 28
              messageType:
                default: "ACK"
                value: "ACK"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "ProtocolVersion"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "ReceiveBufferSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "SendBufferSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "MaxMessageSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "MaxChunkCount"
        parser: "binary"
        testInput:
          decode: "<<0x41, 0x43, 0x4b, 0x46, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00>>"
          encode: |
            %{
              "Header" => %{
                "MessageSize" => %{"value" => 28}
              },
              "MaxChunkCount" => %{"value" => 0},
              "MaxMessageSize" => %{"value" => 0},
              "ProtocolVersion" => %{"value" => 0},
              "ReceiveBufferSize" => %{"value" => 8196},
              "SendBufferSize" => %{"value" => 8196}
            }
      ActivateSessionRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 467
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SignatureData"
            name: "clientSignature"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "certificateLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["certificateLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["certificateLength"]["value"]
                end
            model: "SignedSoftwareCertificate"
            name: "clientSoftwareCertificates"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "localeIdLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["localeIdLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["localeIdLength"]["value"]
                end
            model: "String"
            name: "localeIds"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExtensionObject"
            name: "userIdentityToken"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SignatureData"
            name: "userTokenSignature"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0xd3, 0x01, 0x02, 0x00, 0x00, 0x18, 0x6c, 0xdd, 0x0f, 0x45, 0x2b, 0x4d, 0xf1, 0xbb, 0x7b, 0xd4, 0x01, 0x02, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x65, 0x6e, 0x2d, 0x55, 0x53, 0x01, 0x00, 0x41, 0x01, 0x01, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      ActivateSessionResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 470
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "serverNonce"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "StatusCode"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfo"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0xd6, 0x01, 0x30, 0x6c, 0x22, 0xf2, 0xbb, 0x7b, 0xd4, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x0e, 0x15, 0x3d, 0xb4, 0x04, 0xf7, 0xc5, 0x39, 0x08, 0x63, 0x4e, 0x7f, 0x86, 0xc4, 0x80, 0x7c, 0x4a, 0x36, 0x99, 0xbe, 0x9f, 0x83, 0x88, 0x61, 0xec, 0x4b, 0x6d, 0xdd, 0xae, 0xc2, 0xab, 0x2e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      AddNodesItem:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExpandedNodeId"
            name: "parentNodeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "referenceTypeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExpandedNodeId"
            name: "requestedNewNodeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "QualifiedName"
            name: "browseName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeClass"
            name: "nodeClass"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExtensionObject"
            name: "nodeAttributes"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExpandedNodeId"
            name: "typeDefinition"
        parser: "binary"
        testOutput: {}
      AddNodesRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 488
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "itemLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["itemLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["itemLength"]["value"]
                end
            model: "AddNodesItem"
            name: "nodesToAdd"
        parser: "binary"
        testOutput: {}
      AddNodesResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 491
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "AddNodesResult"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
        testOutput: {}
      AddNodesResult:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "StatusCode"
            name: "statusCode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "addedNodeId"
        parser: "binary"
        testOutput: {}
      ApplicationDescription:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "applicationUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "productUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "LocalizedText"
            name: "applicationName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "applicationType"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "gatewayServerUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "discoveryProfileUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "discoveryUrlLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["discoveryUrlLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["discoveryUrlLength"]["value"]
                end
            model: "String"
            name: "discoveryUrls"
        parser: "binary"
        testInput:
          decode: "<<0x2c, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x27, 0x20, 0x4f, 0x50, 0x43, 0x20, 0x55, 0x41, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      ApplicationInstanceCertificate:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "version"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "serialNumber"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "signatureAlgorithm"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "signature"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "issuer"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "validFrom"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "validTo"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Structure"
            name: "subject"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "applicationUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "hostnameLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["hostnameLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["hostnameLength"]["value"]
                end
            model: "String"
            name: "hostnames"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "publicKey"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "keyUsageLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["keyUsageLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["keyUsageLength"]["value"]
                end
            model: "String"
            name: "keyUsage"
        parser: "binary"
        testInput:
          decode: "<<0x1d, 0x04, 0x00, 0x00, 0x30, 0x82, 0x04, 0x19, 0x30, 0x82, 0x03, 0x01, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x67, 0x0f, 0xc5, 0x09, 0x1c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xcf, 0x00, 0xe3, 0x9a, 0x64, 0x7b, 0x15, 0x7c, 0x96, 0x6e, 0x77, 0xcd, 0xf7, 0x92, 0xfc, 0x76, 0x79, 0xff, 0x75, 0x55, 0x03, 0xfe, 0x64, 0x99, 0xf1, 0xb8, 0xb4, 0xea, 0x9e, 0x66, 0x9f, 0xaa, 0x2c, 0x22, 0x8c, 0x6a, 0xa6, 0x60, 0xf0, 0x14, 0x13, 0xcb, 0xa6, 0x51, 0xa0, 0x33, 0xd6, 0xff, 0xa3, 0x36, 0xc0, 0x46, 0xa6, 0xfb, 0x5a, 0xa0, 0x1b, 0x21, 0x67, 0x12, 0x17, 0x59, 0xe6, 0xc5, 0x8a, 0x96, 0x0a, 0x5e, 0xf6, 0xe0, 0x42, 0xd3, 0xd9, 0x1f, 0xf1, 0x20, 0x9d, 0x0c, 0xf8, 0x1d, 0x65, 0x69, 0xa5, 0x2a, 0x45, 0x8e, 0x92, 0x10, 0x6b, 0x24, 0xd7, 0x29, 0xfb, 0x8d, 0xa8, 0x67, 0x79, 0x0e, 0x9c, 0x57, 0x1c, 0x7d, 0xfa, 0x46, 0xa6, 0xc4, 0xbc, 0x5e, 0x4d, 0x56, 0x76, 0x16, 0xca, 0x52, 0x8e, 0x39, 0xb5, 0x44, 0x3e, 0x75, 0x51, 0xb7, 0xed, 0x7f, 0x42, 0x24, 0xa0, 0x5d, 0xe0, 0x81, 0x7a, 0x8b, 0x61, 0x46, 0x89, 0xb7, 0xbe, 0xfb, 0xa0, 0xcb, 0xce, 0x14, 0x61, 0xd8, 0x57, 0xd8, 0x6e, 0x70, 0xee, 0x52, 0x34, 0x50, 0x28, 0xe2, 0xc2, 0x7d, 0x1a, 0xde, 0x44, 0x2c, 0x76, 0xea, 0xcf, 0x0e, 0x9f, 0x82, 0x3c, 0x0a, 0xaa, 0x78, 0x61, 0x15, 0x34, 0x65, 0x3c, 0x21, 0x20, 0xd1, 0x2a, 0xa3, 0xb1, 0xde, 0x43, 0x1b, 0xb5, 0xe2, 0xb7, 0xe4, 0x7a, 0x13, 0xfa, 0x22, 0xc8, 0x8f, 0x45, 0x97, 0xcb, 0x00, 0xc8, 0xd8, 0xe5, 0x2c, 0xb7, 0x5d, 0xfc, 0x77, 0x57, 0xf7, 0xd9, 0x5f, 0xf2, 0x1c, 0x86, 0xbd, 0x67, 0x27, 0x0e, 0x21, 0x59, 0x41, 0x75, 0x54, 0x48, 0x20, 0x26, 0x8a, 0xb3, 0xcb, 0x7b, 0xd2, 0x79, 0xa1, 0x17, 0x50, 0x74, 0xcf, 0xc5, 0xd0, 0x12, 0x5a, 0xd7, 0xb7, 0x4f, 0xe8, 0xf3, 0x82, 0x96, 0xc3, 0xdd, 0x1a, 0x86, 0x4d, 0xe4, 0xe5, 0x32, 0xc9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xdc, 0x30, 0x81, 0xd9, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x60, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x59, 0x30, 0x57, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x82, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x42, 0x79, 0xa2, 0x23, 0xd4, 0x0d, 0x47, 0x1b, 0x87, 0x3a, 0xa6, 0x36, 0xd3, 0x98, 0x69, 0x49, 0xc0, 0x7b, 0xb1, 0xe1, 0x3c, 0x95, 0x18, 0x5f, 0x6a, 0x4e, 0xe7, 0xae, 0x7e, 0x46, 0x10, 0x69, 0xfa, 0x43, 0xa7, 0x01, 0x7a, 0x70, 0x2b, 0xbd, 0x04, 0x84, 0x15, 0x44, 0xef, 0xcd, 0x34, 0xe9, 0x01, 0x84, 0x11, 0x50, 0xe4, 0x04, 0x73, 0xed, 0x2d, 0x90, 0xef, 0xa7, 0x00, 0x20, 0xc2, 0x39, 0x09, 0xff, 0xf4, 0x89, 0xd4, 0x69, 0x5d, 0x54, 0xfd, 0x76, 0x16, 0x29, 0x59, 0x2b, 0xbc, 0x67, 0xcb, 0x83, 0xd1, 0x7f, 0xb5, 0xa3, 0x26, 0xf2, 0x24, 0x5c, 0xe1, 0x8f, 0xfb, 0x28, 0xe3, 0x6b, 0xf7, 0x12, 0x24, 0xee, 0x57, 0x87, 0x6d, 0xd2, 0x22, 0x4b, 0xf1, 0x33, 0x47, 0xe4, 0xba, 0xfb, 0x71, 0x53, 0xbd, 0x4f, 0xb2, 0xab, 0xf9, 0x19, 0xec, 0xea, 0xa5, 0xc2, 0xf5, 0xdc, 0x73, 0xb0, 0x91, 0x70, 0x9f, 0xe2, 0x07, 0x18, 0x62, 0xda, 0xc8, 0x81, 0x9c, 0x91, 0xbc, 0x9a, 0x2e, 0x34, 0x97, 0x42, 0xd1, 0x18, 0xe7, 0xf4, 0x47, 0x12, 0x87, 0x7c, 0xd9, 0x51, 0x92, 0xeb, 0x63, 0x64, 0x10, 0x56, 0x93, 0x0d, 0x45, 0x56, 0x23, 0x82, 0x1a, 0xdb, 0xdd, 0xaa, 0x90, 0x3e, 0xea, 0x0f, 0xf1, 0x48, 0xa2, 0x62, 0x0a, 0xa4, 0x06, 0xa7, 0x3b, 0x8f, 0x89, 0xd7, 0xa0, 0x92, 0xdc, 0x38, 0x40, 0x98, 0x55, 0x11, 0x83, 0x81, 0xfc, 0xb9, 0x73, 0x6e, 0x80, 0x58, 0xda, 0x1e, 0x09, 0x70, 0x9a, 0x20, 0xe7, 0x7e, 0x49, 0x16, 0x5f, 0xe4, 0x4d, 0x26, 0x62, 0x5c, 0x9c, 0x81, 0x6a, 0xc3, 0x8c, 0x28, 0xd9, 0x44, 0xaf, 0xc4, 0xa8, 0x58, 0x11, 0x7d, 0x01, 0x02, 0x24, 0x8d, 0xef, 0x95, 0xe3, 0xd5, 0xbb, 0xcc, 0x9a, 0x8d, 0x8a, 0x60, 0x78, 0x8d, 0x75, 0x6e, 0x2b, 0xb9, 0x2e, 0x9c>>"
        testOutput: {}
      AsymmetricalgorithmSecurityheader:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "SecurityPolicyUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "SenderCertificate"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "ReceiverCertificateThumbprint"
        parser: "binary"
      Boolean:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: null
              units: "bytes"
            size: 1
            type: "integer"
        parser: "binary"
      BrowseDescription:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "nodeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "browseDirection"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "referenceTypeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "includeSubtypes"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "nodeClassMask"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "resultMask"
        parser: "binary"
        testInput:
          decode: "<<0x00, 0x2d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00>>"
        testOutput: {}
      BrowseRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 527
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ViewDescription"
            name: "View"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "requestedMaxReferencePerNode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "nodeLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["nodeLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["nodeLength"]["value"]
                end
            model: "BrowseDescription"
            name: "nodesToBrowse"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0x65, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x02, 0x02, 0x00, 0x00, 0x18, 0x6c, 0xdd, 0x0f, 0xa4, 0xf9, 0x71, 0xf1, 0xbb, 0x7b, 0xd4, 0x01, 0x05, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00>>"
        testOutput: {}
      BrowseResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 530
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "BrowseResult"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0xd6, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x02, 0x80, 0x5d, 0x45, 0xf2, 0xbb, 0x7b, 0xd4, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x00, 0x28, 0x01, 0xc0, 0x3d, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x02, 0x0a, 0x00, 0x00, 0x00, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x01, 0xc0, 0x55, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x02, 0x07, 0x00, 0x00, 0x00, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x3d, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x01, 0xc0, 0x56, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x79, 0x70, 0x65, 0x73, 0x02, 0x05, 0x00, 0x00, 0x00, 0x54, 0x79, 0x70, 0x65, 0x73, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x3d, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x01, 0xc0, 0x57, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x56, 0x69, 0x65, 0x77, 0x73, 0x02, 0x05, 0x00, 0x00, 0x00, 0x56, 0x69, 0x65, 0x77, 0x73, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x3d, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      BrowseResult:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "StatusCode"
            name: "statusCode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "continuationPoint"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "referenceLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["referenceLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["referenceLength"]["value"]
                end
            model: "ReferenceDescription"
            name: "References"
        parser: "binary"
        testInput:
          decode: "<<0x70, 0xa3, 0xaa, 0xd7, 0xb5, 0xeb, 0xd5, 0x01, 0x58, 0x93, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0xc0, 0x22, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x48, 0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x02, 0x08, 0x00, 0x00, 0x00, 0x48, 0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      BuildInfo:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "ProductUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "ManufacturerName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "ProductName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "SoftwareVersion"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "BuildNumber"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "BuildDate"
        parser: "binary"
        testInput:
          decode: "<<0x90, 0x6c, 0x5a, 0x3d, 0x3b, 0xc3, 0xd4, 0x01, 0x40, 0xe5, 0xe1, 0x77, 0x50, 0xc3, 0xd4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0xff, 0xff, 0xff, 0x10, 0x00, 0x00, 0x00, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x03, 0x00, 0x00, 0x00, 0x33, 0x2e, 0x31, 0x05, 0x00, 0x00, 0x00, 0x36, 0x2d, 0x31, 0x39, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      Byte:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: null
              signedness: "unsigned"
              units: "bytes"
            size: 1
            type: "integer"
        parser: "binary"
        testInput:
          decode: "<<0x91>>"
      ByteString:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "Length"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["Length"]["value"] do
                  x when x in [0, -1, 4294967295] -> 0
                  _ -> v["Length"]["value"]
                end
            model: "Byte"
            name: "value"
        parser: "binary"
        testInput:
          decode: "<<0x20, 0x00, 0x00, 0x00, 0x61, 0x81, 0x90, 0x9d, 0xf1, 0xbc, 0xaf, 0xb3, 0x68, 0x5f, 0x34, 0xfc, 0x59, 0x52, 0x37, 0xff, 0xbb, 0xf1, 0x18, 0x29, 0x5d, 0x96, 0xb8, 0x36, 0xa1, 0x65, 0x5b, 0x9d, 0xc8, 0x37, 0x53, 0x29>>"
      CancelServiceRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 479
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "requestHandle"
        parser: "binary"
        testInput: {}
        testOutput: {}
      CancelServiceResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 482
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "cancelCount"
        parser: "binary"
        testOutput: {}
      ChannelSecurityToken:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "channelId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "tokenId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "createdAt"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "revisedLifetime"
        parser: "binary"
        testInput:
          decode: "<<0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x1d, 0x19, 0xf2, 0xbb, 0x7b, 0xd4, 0x01, 0x80, 0xee, 0x36, 0x00>>"
        testOutput: {}
      ChunkData:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SecureConversationMessageheader"
            name: "MessageHeader"
            overrides:
              messageType:
                default: "MSG"
                value: "MSG"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SymmetricalgorithmSecurityheader"
            name: "SecurityHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Sequenceheader"
            name: "SequenceHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "Body"
            size:
              $action: "elixir"
              value: |
                v["MessageHeader"]["MessageSize"]["value"] - 24
            type: "bytes"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x43, 0x18, 0x10, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xaf, 0x01, 0xb0, 0xcc, 0x4c, 0xf1, 0xbb, 0x7b, 0xd4, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x37, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x28, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x34, 0x34, 0x33, 0x2f, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x2f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1d, 0x04, 0x00, 0x00, 0x30, 0x82, 0x04, 0x19, 0x30, 0x82, 0x03, 0x01, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x67, 0x0f, 0xc5, 0x09, 0x1c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xcf, 0x00, 0xe3, 0x9a, 0x64, 0x7b, 0x15, 0x7c, 0x96, 0x6e, 0x77, 0xcd, 0xf7, 0x92, 0xfc, 0x76, 0x79, 0xff, 0x75, 0x55, 0x03, 0xfe, 0x64, 0x99, 0xf1, 0xb8, 0xb4, 0xea, 0x9e, 0x66, 0x9f, 0xaa, 0x2c, 0x22, 0x8c, 0x6a, 0xa6, 0x60, 0xf0, 0x14, 0x13, 0xcb, 0xa6, 0x51, 0xa0, 0x33, 0xd6, 0xff, 0xa3, 0x36, 0xc0, 0x46, 0xa6, 0xfb, 0x5a, 0xa0, 0x1b, 0x21, 0x67, 0x12, 0x17, 0x59, 0xe6, 0xc5, 0x8a, 0x96, 0x0a, 0x5e, 0xf6, 0xe0, 0x42, 0xd3, 0xd9, 0x1f, 0xf1, 0x20, 0x9d, 0x0c, 0xf8, 0x1d, 0x65, 0x69, 0xa5, 0x2a, 0x45, 0x8e, 0x92, 0x10, 0x6b, 0x24, 0xd7, 0x29, 0xfb, 0x8d, 0xa8, 0x67, 0x79, 0x0e, 0x9c, 0x57, 0x1c, 0x7d, 0xfa, 0x46, 0xa6, 0xc4, 0xbc, 0x5e, 0x4d, 0x56, 0x76, 0x16, 0xca, 0x52, 0x8e, 0x39, 0xb5, 0x44, 0x3e, 0x75, 0x51, 0xb7, 0xed, 0x7f, 0x42, 0x24, 0xa0, 0x5d, 0xe0, 0x81, 0x7a, 0x8b, 0x61, 0x46, 0x89, 0xb7, 0xbe, 0xfb, 0xa0, 0xcb, 0xce, 0x14, 0x61, 0xd8, 0x57, 0xd8, 0x6e, 0x70, 0xee, 0x52, 0x34, 0x50, 0x28, 0xe2, 0xc2, 0x7d, 0x1a, 0xde, 0x44, 0x2c, 0x76, 0xea, 0xcf, 0x0e, 0x9f, 0x82, 0x3c, 0x0a, 0xaa, 0x78, 0x61, 0x15, 0x34, 0x65, 0x3c, 0x21, 0x20, 0xd1, 0x2a, 0xa3, 0xb1, 0xde, 0x43, 0x1b, 0xb5, 0xe2, 0xb7, 0xe4, 0x7a, 0x13, 0xfa, 0x22, 0xc8, 0x8f, 0x45, 0x97, 0xcb, 0x00, 0xc8, 0xd8, 0xe5, 0x2c, 0xb7, 0x5d, 0xfc, 0x77, 0x57, 0xf7, 0xd9, 0x5f, 0xf2, 0x1c, 0x86, 0xbd, 0x67, 0x27, 0x0e, 0x21, 0x59, 0x41, 0x75, 0x54, 0x48, 0x20, 0x26, 0x8a, 0xb3, 0xcb, 0x7b, 0xd2, 0x79, 0xa1, 0x17, 0x50, 0x74, 0xcf, 0xc5, 0xd0, 0x12, 0x5a, 0xd7, 0xb7, 0x4f, 0xe8, 0xf3, 0x82, 0x96, 0xc3, 0xdd, 0x1a, 0x86, 0x4d, 0xe4, 0xe5, 0x32, 0xc9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xdc, 0x30, 0x81, 0xd9, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x60, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x59, 0x30, 0x57, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x82, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x42, 0x79, 0xa2, 0x23, 0xd4, 0x0d, 0x47, 0x1b, 0x87, 0x3a, 0xa6, 0x36, 0xd3, 0x98, 0x69, 0x49, 0xc0, 0x7b, 0xb1, 0xe1, 0x3c, 0x95, 0x18, 0x5f, 0x6a, 0x4e, 0xe7, 0xae, 0x7e, 0x46, 0x10, 0x69, 0xfa, 0x43, 0xa7, 0x01, 0x7a, 0x70, 0x2b, 0xbd, 0x04, 0x84, 0x15, 0x44, 0xef, 0xcd, 0x34, 0xe9, 0x01, 0x84, 0x11, 0x50, 0xe4, 0x04, 0x73, 0xed, 0x2d, 0x90, 0xef, 0xa7, 0x00, 0x20, 0xc2, 0x39, 0x09, 0xff, 0xf4, 0x89, 0xd4, 0x69, 0x5d, 0x54, 0xfd, 0x76, 0x16, 0x29, 0x59, 0x2b, 0xbc, 0x67, 0xcb, 0x83, 0xd1, 0x7f, 0xb5, 0xa3, 0x26, 0xf2, 0x24, 0x5c, 0xe1, 0x8f, 0xfb, 0x28, 0xe3, 0x6b, 0xf7, 0x12, 0x24, 0xee, 0x57, 0x87, 0x6d, 0xd2, 0x22, 0x4b, 0xf1, 0x33, 0x47, 0xe4, 0xba, 0xfb, 0x71, 0x53, 0xbd, 0x4f, 0xb2, 0xab, 0xf9, 0x19, 0xec, 0xea, 0xa5, 0xc2, 0xf5, 0xdc, 0x73, 0xb0, 0x91, 0x70, 0x9f, 0xe2, 0x07, 0x18, 0x62, 0xda, 0xc8, 0x81, 0x9c, 0x91, 0xbc, 0x9a, 0x2e, 0x34, 0x97, 0x42, 0xd1, 0x18, 0xe7, 0xf4, 0x47, 0x12, 0x87, 0x7c, 0xd9, 0x51, 0x92, 0xeb, 0x63, 0x64, 0x10, 0x56, 0x93, 0x0d, 0x45, 0x56, 0x23, 0x82, 0x1a, 0xdb, 0xdd, 0xaa, 0x90, 0x3e, 0xea, 0x0f, 0xf1, 0x48, 0xa2, 0x62, 0x0a, 0xa4, 0x06, 0xa7, 0x3b, 0x8f, 0x89, 0xd7, 0xa0, 0x92, 0xdc, 0x38, 0x40, 0x98, 0x55, 0x11, 0x83, 0x81, 0xfc, 0xb9, 0x73, 0x6e, 0x80, 0x58, 0xda, 0x1e, 0x09, 0x70, 0x9a, 0x20, 0xe7, 0x7e, 0x49, 0x16, 0x5f, 0xe4, 0x4d, 0x26, 0x62, 0x5c, 0x9c, 0x81, 0x6a, 0xc3, 0x8c, 0x28, 0xd9, 0x44, 0xaf, 0xc4, 0xa8, 0x58, 0x11, 0x7d, 0x01, 0x02, 0x24, 0x8d, 0xef, 0x95, 0xe3, 0xd5, 0xbb, 0xcc, 0x9a, 0x8d, 0x8a, 0x60, 0x78, 0x8d, 0x75, 0x6e, 0x2b, 0xb9, 0x2e, 0x9c, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x31, 0x32, 0x38, 0x52, 0x73, 0x61, 0x31, 0x35, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x02, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x37, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x28, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x34, 0x34, 0x33, 0x2f, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x2f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1d, 0x04, 0x00, 0x00, 0x30, 0x82, 0x04, 0x19, 0x30, 0x82, 0x03, 0x01, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x67, 0x0f, 0xc5, 0x09, 0x1c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xcf, 0x00, 0xe3, 0x9a, 0x64, 0x7b, 0x15, 0x7c, 0x96, 0x6e, 0x77, 0xcd, 0xf7, 0x92, 0xfc, 0x76, 0x79, 0xff, 0x75, 0x55, 0x03, 0xfe, 0x64, 0x99, 0xf1, 0xb8, 0xb4, 0xea, 0x9e, 0x66, 0x9f, 0xaa, 0x2c, 0x22, 0x8c, 0x6a, 0xa6, 0x60, 0xf0, 0x14, 0x13, 0xcb, 0xa6, 0x51, 0xa0, 0x33, 0xd6, 0xff, 0xa3, 0x36, 0xc0, 0x46, 0xa6, 0xfb, 0x5a, 0xa0, 0x1b, 0x21, 0x67, 0x12, 0x17, 0x59, 0xe6, 0xc5, 0x8a, 0x96, 0x0a, 0x5e, 0xf6, 0xe0, 0x42, 0xd3, 0xd9, 0x1f, 0xf1, 0x20, 0x9d, 0x0c, 0xf8, 0x1d, 0x65, 0x69, 0xa5, 0x2a, 0x45, 0x8e, 0x92, 0x10, 0x6b, 0x24, 0xd7, 0x29, 0xfb, 0x8d, 0xa8, 0x67, 0x79, 0x0e, 0x9c, 0x57, 0x1c, 0x7d, 0xfa, 0x46, 0xa6, 0xc4, 0xbc, 0x5e, 0x4d, 0x56, 0x76, 0x16, 0xca, 0x52, 0x8e, 0x39, 0xb5, 0x44, 0x3e, 0x75, 0x51, 0xb7, 0xed, 0x7f, 0x42, 0x24, 0xa0, 0x5d, 0xe0, 0x81, 0x7a, 0x8b, 0x61, 0x46, 0x89, 0xb7, 0xbe, 0xfb, 0xa0, 0xcb, 0xce, 0x14, 0x61, 0xd8, 0x57, 0xd8, 0x6e, 0x70, 0xee, 0x52, 0x34, 0x50, 0x28, 0xe2, 0xc2, 0x7d, 0x1a, 0xde, 0x44, 0x2c, 0x76, 0xea, 0xcf, 0x0e, 0x9f, 0x82, 0x3c, 0x0a, 0xaa, 0x78, 0x61, 0x15, 0x34, 0x65, 0x3c, 0x21, 0x20, 0xd1, 0x2a, 0xa3, 0xb1, 0xde, 0x43, 0x1b, 0xb5, 0xe2, 0xb7, 0xe4, 0x7a, 0x13, 0xfa, 0x22, 0xc8, 0x8f, 0x45, 0x97, 0xcb, 0x00, 0xc8, 0xd8, 0xe5, 0x2c, 0xb7, 0x5d, 0xfc, 0x77, 0x57, 0xf7, 0xd9, 0x5f, 0xf2, 0x1c, 0x86, 0xbd, 0x67, 0x27, 0x0e, 0x21, 0x59, 0x41, 0x75, 0x54, 0x48, 0x20, 0x26, 0x8a, 0xb3, 0xcb, 0x7b, 0xd2, 0x79, 0xa1, 0x17, 0x50, 0x74, 0xcf, 0xc5, 0xd0, 0x12, 0x5a, 0xd7, 0xb7, 0x4f, 0xe8, 0xf3, 0x82, 0x96, 0xc3, 0xdd, 0x1a, 0x86, 0x4d, 0xe4, 0xe5, 0x32, 0xc9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xdc, 0x30, 0x81, 0xd9, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x60, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x59, 0x30, 0x57, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x82, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x42, 0x79, 0xa2, 0x23, 0xd4, 0x0d, 0x47, 0x1b, 0x87, 0x3a, 0xa6, 0x36, 0xd3, 0x98, 0x69, 0x49, 0xc0, 0x7b, 0xb1, 0xe1, 0x3c, 0x95, 0x18, 0x5f, 0x6a, 0x4e, 0xe7, 0xae, 0x7e, 0x46, 0x10, 0x69, 0xfa, 0x43, 0xa7, 0x01, 0x7a, 0x70, 0x2b, 0xbd, 0x04, 0x84, 0x15, 0x44, 0xef, 0xcd, 0x34, 0xe9, 0x01, 0x84, 0x11, 0x50, 0xe4, 0x04, 0x73, 0xed, 0x2d, 0x90, 0xef, 0xa7, 0x00, 0x20, 0xc2, 0x39, 0x09, 0xff, 0xf4, 0x89, 0xd4, 0x69, 0x5d, 0x54, 0xfd, 0x76, 0x16, 0x29, 0x59, 0x2b, 0xbc, 0x67, 0xcb, 0x83, 0xd1, 0x7f, 0xb5, 0xa3, 0x26, 0xf2, 0x24, 0x5c, 0xe1, 0x8f, 0xfb, 0x28, 0xe3, 0x6b, 0xf7, 0x12, 0x24, 0xee, 0x57, 0x87, 0x6d, 0xd2, 0x22, 0x4b, 0xf1, 0x33, 0x47, 0xe4, 0xba, 0xfb, 0x71, 0x53, 0xbd, 0x4f, 0xb2, 0xab, 0xf9, 0x19, 0xec, 0xea, 0xa5, 0xc2, 0xf5, 0xdc, 0x73, 0xb0, 0x91, 0x70, 0x9f, 0xe2, 0x07, 0x18, 0x62, 0xda, 0xc8, 0x81, 0x9c, 0x91, 0xbc, 0x9a, 0x2e, 0x34, 0x97, 0x42, 0xd1, 0x18, 0xe7, 0xf4, 0x47, 0x12, 0x87, 0x7c, 0xd9, 0x51, 0x92, 0xeb, 0x63, 0x64, 0x10, 0x56, 0x93, 0x0d, 0x45, 0x56, 0x23, 0x82, 0x1a, 0xdb, 0xdd, 0xaa, 0x90, 0x3e, 0xea, 0x0f, 0xf1, 0x48, 0xa2, 0x62, 0x0a, 0xa4, 0x06, 0xa7, 0x3b, 0x8f, 0x89, 0xd7, 0xa0, 0x92, 0xdc, 0x38, 0x40, 0x98, 0x55, 0x11, 0x83, 0x81, 0xfc, 0xb9, 0x73, 0x6e, 0x80, 0x58, 0xda, 0x1e, 0x09, 0x70, 0x9a, 0x20, 0xe7, 0x7e, 0x49, 0x16, 0x5f, 0xe4, 0x4d, 0x26, 0x62, 0x5c, 0x9c, 0x81, 0x6a, 0xc3, 0x8c, 0x28, 0xd9, 0x44, 0xaf, 0xc4, 0xa8, 0x58, 0x11, 0x7d, 0x01, 0x02, 0x24, 0x8d, 0xef, 0x95, 0xe3, 0xd5, 0xbb, 0xcc, 0x9a, 0x8d, 0x8a, 0x60, 0x78, 0x8d, 0x75, 0x6e, 0x2b, 0xb9, 0x2e, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x4e, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x37, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x28, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x34, 0x34, 0x33, 0x2f, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x2f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1d, 0x04, 0x00, 0x00, 0x30, 0x82, 0x04, 0x19, 0x30, 0x82, 0x03, 0x01, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x67, 0x0f, 0xc5, 0x09, 0x1c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xcf, 0x00, 0xe3, 0x9a, 0x64, 0x7b, 0x15, 0x7c, 0x96, 0x6e, 0x77, 0xcd, 0xf7, 0x92, 0xfc, 0x76, 0x79, 0xff, 0x75, 0x55, 0x03, 0xfe, 0x64, 0x99, 0xf1, 0xb8, 0xb4, 0xea, 0x9e, 0x66, 0x9f, 0xaa, 0x2c, 0x22, 0x8c, 0x6a, 0xa6, 0x60, 0xf0, 0x14, 0x13, 0xcb, 0xa6, 0x51, 0xa0, 0x33, 0xd6, 0xff, 0xa3, 0x36, 0xc0, 0x46, 0xa6, 0xfb, 0x5a, 0xa0, 0x1b, 0x21, 0x67, 0x12, 0x17, 0x59, 0xe6, 0xc5, 0x8a, 0x96, 0x0a, 0x5e, 0xf6, 0xe0, 0x42, 0xd3, 0xd9, 0x1f, 0xf1, 0x20, 0x9d, 0x0c, 0xf8, 0x1d, 0x65, 0x69, 0xa5, 0x2a, 0x45, 0x8e, 0x92, 0x10, 0x6b, 0x24, 0xd7, 0x29, 0xfb, 0x8d, 0xa8, 0x67, 0x79, 0x0e, 0x9c, 0x57, 0x1c, 0x7d, 0xfa, 0x46, 0xa6, 0xc4, 0xbc, 0x5e, 0x4d, 0x56, 0x76, 0x16, 0xca, 0x52, 0x8e, 0x39, 0xb5, 0x44, 0x3e, 0x75, 0x51, 0xb7, 0xed, 0x7f, 0x42, 0x24, 0xa0, 0x5d, 0xe0, 0x81, 0x7a, 0x8b, 0x61, 0x46, 0x89, 0xb7, 0xbe, 0xfb, 0xa0, 0xcb, 0xce, 0x14, 0x61, 0xd8, 0x57, 0xd8, 0x6e, 0x70, 0xee, 0x52, 0x34, 0x50, 0x28, 0xe2, 0xc2, 0x7d, 0x1a, 0xde, 0x44, 0x2c, 0x76, 0xea, 0xcf, 0x0e, 0x9f, 0x82, 0x3c, 0x0a, 0xaa, 0x78, 0x61, 0x15, 0x34, 0x65, 0x3c, 0x21, 0x20, 0xd1, 0x2a, 0xa3, 0xb1, 0xde, 0x43, 0x1b, 0xb5, 0xe2, 0xb7, 0xe4, 0x7a, 0x13, 0xfa, 0x22, 0xc8, 0x8f, 0x45, 0x97, 0xcb, 0x00, 0xc8, 0xd8, 0xe5, 0x2c, 0xb7, 0x5d, 0xfc, 0x77, 0x57, 0xf7, 0xd9, 0x5f, 0xf2, 0x1c, 0x86, 0xbd, 0x67, 0x27, 0x0e, 0x21, 0x59, 0x41, 0x75, 0x54, 0x48, 0x20, 0x26, 0x8a, 0xb3, 0xcb, 0x7b, 0xd2, 0x79, 0xa1, 0x17, 0x50, 0x74, 0xcf, 0xc5, 0xd0, 0x12, 0x5a, 0xd7, 0xb7, 0x4f, 0xe8, 0xf3, 0x82, 0x96, 0xc3, 0xdd, 0x1a, 0x86, 0x4d, 0xe4, 0xe5, 0x32, 0xc9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xdc, 0x30, 0x81, 0xd9, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x60, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x59, 0x30, 0x57, 0x86, 0x37, 0x75, 0x72>>"
      CloseSecureChannelRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SecureConversationMessageheader"
            name: "MessageHeader"
            overrides:
              messageType:
                default: "CLO"
                value: "CLO"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SymmetricalgorithmSecurityheader"
            name: "SecurityHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Sequenceheader"
            name: "SequenceHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 452
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          # - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
          #   count: 0
          #   model: "Int32"
          #   name: "secureChannelId"
        parser: "binary"
        testInput:
          decode: "\"434c4f46390000000c0000006700000017000000170000000100c401000000000000000000000000000000000000ffffffff00000000000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      CloseSecureChannelResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 455
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      CloseSessionRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 473
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "deleteSubscriptions"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0x3f, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0xd9, 0x01, 0x02, 0x00, 0x00, 0xa0, 0x0f, 0x0e, 0x56, 0x70, 0xba, 0x4c, 0x0f, 0x34, 0xf0, 0xd5, 0x01, 0x7f, 0xb4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01>>"
        testOutput: {}
      CloseSessionResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 476
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0x34, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0xdc, 0x01, 0xc0, 0x7d, 0x4d, 0x0f, 0x34, 0xf0, 0xd5, 0x01, 0x7f, 0xb4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00>>"
        testOutput: {}
      Counter:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
        parser: "binary"
        testInput:
          decode: {}
        testOutput: {}
      CreateMonitoredItemsRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 751
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "timestampsToReturn"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "itemsToCreateLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["itemsToCreateLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["itemsToCreateLength"]["value"]
                end
            model: "MonitoredItemCreateRequest"
            name: "itemsToCreate"
        parser: "binary"
        testInput:
          decode: "\"0100ef02050000200000005ac8070a3f2f8525b56a102cea3df3303d21425c997ddee59a6f4d49951444cf2063e60922f7d5014404000000000000ffffffff000000000000000100000002000000010000000305000c0000004d79456e756d4f626a6563740d000000ffffffff0000ffffffff0200000001000000000000000000f0bf0000000100000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      CreateMonitoredItemsResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 754
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "MonitoredItemCreateResult"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
        testInput:
          decode: "\"0100f20220d4e80922f7d501440400000000000000ffffffff0000000100000000000000010000000000000000408f4001000000000000ffffffff\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      CreateSessionRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 461
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ApplicationDescription"
            name: "clientDescription"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "endpointUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "sessionName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "clientNonce"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "clientCertificate"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "RequestedSessionTimeout"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxResponseMessageSize"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0x78, 0x01, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0xcd, 0x01, 0x00, 0x00, 0xf0, 0xe8, 0xae, 0x0d, 0x34, 0xf0, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x73, 0x2d, 0x4d, 0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x50, 0x72, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x4f, 0x70, 0x63, 0x55, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x23, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x4f, 0x70, 0x63, 0x55, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x03, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x4f, 0x70, 0x63, 0x55, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x35, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x73, 0x2d, 0x4d, 0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x50, 0x72, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x73, 0x2d, 0x4d, 0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x50, 0x72, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x1b, 0x00, 0x00, 0x00, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x4f, 0x70, 0x63, 0x55, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x35, 0x20, 0x00, 0x00, 0x00, 0x72, 0xd9, 0x74, 0xd8, 0xcf, 0x25, 0x2e, 0x80, 0xec, 0x21, 0x12, 0xd9, 0xd2, 0x39, 0xde, 0xdb, 0x78, 0x20, 0x81, 0xab, 0x0b, 0x1c, 0xd6, 0x5b, 0x4d, 0xf9, 0x78, 0x5b, 0x30, 0x00, 0xb0, 0x47, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4f, 0x12, 0x41, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      CreateSessionResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 464
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "sessionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "authenticationToken"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Double"
            name: "revisedSessionTimeout"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "serverNonce"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverCertificate"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "serverEndpointLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["serverEndpointLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["serverEndpointLength"]["value"]
                end
            model: "EndpointDescription"
            name: "serverEndpoints"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "certificateLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["certificateLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["certificateLength"]["value"]
                end
            model: "SignedSoftwareCertificate"
            name: "serverSoftwareCertificates"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SignatureData"
            name: "serverSignature"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxRequestMessageSize"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0x61, 0x08, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0xd0, 0x01, 0x50, 0x49, 0x20, 0xf2, 0xbb, 0x7b, 0xd4, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0xfd, 0x32, 0x85, 0x77, 0xe3, 0x2f, 0x88, 0x4e, 0x84, 0x42, 0xcc, 0xcf, 0x58, 0x5c, 0x47, 0xfa, 0x02, 0x00, 0x00, 0x18, 0x6c, 0xdd, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xed, 0x40, 0x20, 0x00, 0x00, 0x00, 0x61, 0x81, 0x90, 0x9d, 0xf1, 0xbc, 0xaf, 0xb3, 0x68, 0x5f, 0x34, 0xfc, 0x59, 0x52, 0x37, 0xff, 0xbb, 0xf1, 0x18, 0x29, 0x5d, 0x96, 0xb8, 0x36, 0xa1, 0x65, 0x5b, 0x9d, 0xc8, 0x37, 0x53, 0x29, 0x1d, 0x04, 0x00, 0x00, 0x30, 0x82, 0x04, 0x19, 0x30, 0x82, 0x03, 0x01, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x67, 0x0f, 0xc5, 0x09, 0x1c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xcf, 0x00, 0xe3, 0x9a, 0x64, 0x7b, 0x15, 0x7c, 0x96, 0x6e, 0x77, 0xcd, 0xf7, 0x92, 0xfc, 0x76, 0x79, 0xff, 0x75, 0x55, 0x03, 0xfe, 0x64, 0x99, 0xf1, 0xb8, 0xb4, 0xea, 0x9e, 0x66, 0x9f, 0xaa, 0x2c, 0x22, 0x8c, 0x6a, 0xa6, 0x60, 0xf0, 0x14, 0x13, 0xcb, 0xa6, 0x51, 0xa0, 0x33, 0xd6, 0xff, 0xa3, 0x36, 0xc0, 0x46, 0xa6, 0xfb, 0x5a, 0xa0, 0x1b, 0x21, 0x67, 0x12, 0x17, 0x59, 0xe6, 0xc5, 0x8a, 0x96, 0x0a, 0x5e, 0xf6, 0xe0, 0x42, 0xd3, 0xd9, 0x1f, 0xf1, 0x20, 0x9d, 0x0c, 0xf8, 0x1d, 0x65, 0x69, 0xa5, 0x2a, 0x45, 0x8e, 0x92, 0x10, 0x6b, 0x24, 0xd7, 0x29, 0xfb, 0x8d, 0xa8, 0x67, 0x79, 0x0e, 0x9c, 0x57, 0x1c, 0x7d, 0xfa, 0x46, 0xa6, 0xc4, 0xbc, 0x5e, 0x4d, 0x56, 0x76, 0x16, 0xca, 0x52, 0x8e, 0x39, 0xb5, 0x44, 0x3e, 0x75, 0x51, 0xb7, 0xed, 0x7f, 0x42, 0x24, 0xa0, 0x5d, 0xe0, 0x81, 0x7a, 0x8b, 0x61, 0x46, 0x89, 0xb7, 0xbe, 0xfb, 0xa0, 0xcb, 0xce, 0x14, 0x61, 0xd8, 0x57, 0xd8, 0x6e, 0x70, 0xee, 0x52, 0x34, 0x50, 0x28, 0xe2, 0xc2, 0x7d, 0x1a, 0xde, 0x44, 0x2c, 0x76, 0xea, 0xcf, 0x0e, 0x9f, 0x82, 0x3c, 0x0a, 0xaa, 0x78, 0x61, 0x15, 0x34, 0x65, 0x3c, 0x21, 0x20, 0xd1, 0x2a, 0xa3, 0xb1, 0xde, 0x43, 0x1b, 0xb5, 0xe2, 0xb7, 0xe4, 0x7a, 0x13, 0xfa, 0x22, 0xc8, 0x8f, 0x45, 0x97, 0xcb, 0x00, 0xc8, 0xd8, 0xe5, 0x2c, 0xb7, 0x5d, 0xfc, 0x77, 0x57, 0xf7, 0xd9, 0x5f, 0xf2, 0x1c, 0x86, 0xbd, 0x67, 0x27, 0x0e, 0x21, 0x59, 0x41, 0x75, 0x54, 0x48, 0x20, 0x26, 0x8a, 0xb3, 0xcb, 0x7b, 0xd2, 0x79, 0xa1, 0x17, 0x50, 0x74, 0xcf, 0xc5, 0xd0, 0x12, 0x5a, 0xd7, 0xb7, 0x4f, 0xe8, 0xf3, 0x82, 0x96, 0xc3, 0xdd, 0x1a, 0x86, 0x4d, 0xe4, 0xe5, 0x32, 0xc9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xdc, 0x30, 0x81, 0xd9, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x60, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x59, 0x30, 0x57, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x82, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x42, 0x79, 0xa2, 0x23, 0xd4, 0x0d, 0x47, 0x1b, 0x87, 0x3a, 0xa6, 0x36, 0xd3, 0x98, 0x69, 0x49, 0xc0, 0x7b, 0xb1, 0xe1, 0x3c, 0x95, 0x18, 0x5f, 0x6a, 0x4e, 0xe7, 0xae, 0x7e, 0x46, 0x10, 0x69, 0xfa, 0x43, 0xa7, 0x01, 0x7a, 0x70, 0x2b, 0xbd, 0x04, 0x84, 0x15, 0x44, 0xef, 0xcd, 0x34, 0xe9, 0x01, 0x84, 0x11, 0x50, 0xe4, 0x04, 0x73, 0xed, 0x2d, 0x90, 0xef, 0xa7, 0x00, 0x20, 0xc2, 0x39, 0x09, 0xff, 0xf4, 0x89, 0xd4, 0x69, 0x5d, 0x54, 0xfd, 0x76, 0x16, 0x29, 0x59, 0x2b, 0xbc, 0x67, 0xcb, 0x83, 0xd1, 0x7f, 0xb5, 0xa3, 0x26, 0xf2, 0x24, 0x5c, 0xe1, 0x8f, 0xfb, 0x28, 0xe3, 0x6b, 0xf7, 0x12, 0x24, 0xee, 0x57, 0x87, 0x6d, 0xd2, 0x22, 0x4b, 0xf1, 0x33, 0x47, 0xe4, 0xba, 0xfb, 0x71, 0x53, 0xbd, 0x4f, 0xb2, 0xab, 0xf9, 0x19, 0xec, 0xea, 0xa5, 0xc2, 0xf5, 0xdc, 0x73, 0xb0, 0x91, 0x70, 0x9f, 0xe2, 0x07, 0x18, 0x62, 0xda, 0xc8, 0x81, 0x9c, 0x91, 0xbc, 0x9a, 0x2e, 0x34, 0x97, 0x42, 0xd1, 0x18, 0xe7, 0xf4, 0x47, 0x12, 0x87, 0x7c, 0xd9, 0x51, 0x92, 0xeb, 0x63, 0x64, 0x10, 0x56, 0x93, 0x0d, 0x45, 0x56, 0x23, 0x82, 0x1a, 0xdb, 0xdd, 0xaa, 0x90, 0x3e, 0xea, 0x0f, 0xf1, 0x48, 0xa2, 0x62, 0x0a, 0xa4, 0x06, 0xa7, 0x3b, 0x8f, 0x89, 0xd7, 0xa0, 0x92, 0xdc, 0x38, 0x40, 0x98, 0x55, 0x11, 0x83, 0x81, 0xfc, 0xb9, 0x73, 0x6e, 0x80, 0x58, 0xda, 0x1e, 0x09, 0x70, 0x9a, 0x20, 0xe7, 0x7e, 0x49, 0x16, 0x5f, 0xe4, 0x4d, 0x26, 0x62, 0x5c, 0x9c, 0x81, 0x6a, 0xc3, 0x8c, 0x28, 0xd9, 0x44, 0xaf, 0xc4, 0xa8, 0x58, 0x11, 0x7d, 0x01, 0x02, 0x24, 0x8d, 0xef, 0x95, 0xe3, 0xd5, 0xbb, 0xcc, 0x9a, 0x8d, 0x8a, 0x60, 0x78, 0x8d, 0x75, 0x6e, 0x2b, 0xb9, 0x2e, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x37, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x28, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x34, 0x34, 0x33, 0x2f, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x2f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1d, 0x04, 0x00, 0x00, 0x30, 0x82, 0x04, 0x19, 0x30, 0x82, 0x03, 0x01, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x67, 0x0f, 0xc5, 0x09, 0x1c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x33, 0x30, 0x5a, 0x30, 0x5e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x50, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x20, 0x4f, 0x50, 0x43, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xcf, 0x00, 0xe3, 0x9a, 0x64, 0x7b, 0x15, 0x7c, 0x96, 0x6e, 0x77, 0xcd, 0xf7, 0x92, 0xfc, 0x76, 0x79, 0xff, 0x75, 0x55, 0x03, 0xfe, 0x64, 0x99, 0xf1, 0xb8, 0xb4, 0xea, 0x9e, 0x66, 0x9f, 0xaa, 0x2c, 0x22, 0x8c, 0x6a, 0xa6, 0x60, 0xf0, 0x14, 0x13, 0xcb, 0xa6, 0x51, 0xa0, 0x33, 0xd6, 0xff, 0xa3, 0x36, 0xc0, 0x46, 0xa6, 0xfb, 0x5a, 0xa0, 0x1b, 0x21, 0x67, 0x12, 0x17, 0x59, 0xe6, 0xc5, 0x8a, 0x96, 0x0a, 0x5e, 0xf6, 0xe0, 0x42, 0xd3, 0xd9, 0x1f, 0xf1, 0x20, 0x9d, 0x0c, 0xf8, 0x1d, 0x65, 0x69, 0xa5, 0x2a, 0x45, 0x8e, 0x92, 0x10, 0x6b, 0x24, 0xd7, 0x29, 0xfb, 0x8d, 0xa8, 0x67, 0x79, 0x0e, 0x9c, 0x57, 0x1c, 0x7d, 0xfa, 0x46, 0xa6, 0xc4, 0xbc, 0x5e, 0x4d, 0x56, 0x76, 0x16, 0xca, 0x52, 0x8e, 0x39, 0xb5, 0x44, 0x3e, 0x75, 0x51, 0xb7, 0xed, 0x7f, 0x42, 0x24, 0xa0, 0x5d, 0xe0, 0x81, 0x7a, 0x8b, 0x61, 0x46, 0x89, 0xb7, 0xbe, 0xfb, 0xa0, 0xcb, 0xce, 0x14, 0x61, 0xd8, 0x57, 0xd8, 0x6e, 0x70, 0xee, 0x52, 0x34, 0x50, 0x28, 0xe2, 0xc2, 0x7d, 0x1a, 0xde, 0x44, 0x2c, 0x76, 0xea, 0xcf, 0x0e, 0x9f, 0x82, 0x3c, 0x0a, 0xaa, 0x78, 0x61, 0x15, 0x34, 0x65, 0x3c, 0x21, 0x20, 0xd1, 0x2a, 0xa3, 0xb1, 0xde, 0x43, 0x1b, 0xb5, 0xe2, 0xb7, 0xe4, 0x7a, 0x13, 0xfa, 0x22, 0xc8, 0x8f, 0x45, 0x97, 0xcb, 0x00, 0xc8, 0xd8, 0xe5, 0x2c, 0xb7, 0x5d, 0xfc, 0x77, 0x57, 0xf7, 0xd9, 0x5f, 0xf2, 0x1c, 0x86, 0xbd, 0x67, 0x27, 0x0e, 0x21, 0x59, 0x41, 0x75, 0x54, 0x48, 0x20, 0x26, 0x8a, 0xb3, 0xcb, 0x7b, 0xd2, 0x79, 0xa1, 0x17, 0x50, 0x74, 0xcf, 0xc5, 0xd0, 0x12, 0x5a, 0xd7, 0xb7, 0x4f, 0xe8, 0xf3, 0x82, 0x96, 0xc3, 0xdd, 0x1a, 0x86, 0x4d, 0xe4, 0xe5, 0x32, 0xc9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xdc, 0x30, 0x81, 0xd9, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x5b, 0xd5, 0xf2, 0xd4, 0xee, 0x09, 0xd6, 0xcc, 0xd0, 0xd4, 0x04, 0xa6, 0xb8, 0x4c, 0xc8, 0xfa, 0xd7, 0x74, 0x82, 0xd2, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x60, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x59, 0x30, 0x57, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x82, 0x1c, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x4b, 0x69, 0x6d, 0x2d, 0x4d, 0x61, 0x63, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x42, 0x79, 0xa2, 0x23, 0xd4, 0x0d, 0x47, 0x1b, 0x87, 0x3a, 0xa6, 0x36, 0xd3, 0x98, 0x69, 0x49, 0xc0, 0x7b, 0xb1, 0xe1, 0x3c, 0x95, 0x18, 0x5f, 0x6a, 0x4e, 0xe7, 0xae, 0x7e, 0x46, 0x10, 0x69, 0xfa, 0x43, 0xa7, 0x01, 0x7a, 0x70, 0x2b, 0xbd, 0x04, 0x84, 0x15, 0x44, 0xef, 0xcd, 0x34, 0xe9, 0x01, 0x84, 0x11, 0x50, 0xe4, 0x04, 0x73, 0xed, 0x2d, 0x90, 0xef, 0xa7, 0x00, 0x20, 0xc2, 0x39, 0x09, 0xff, 0xf4, 0x89, 0xd4, 0x69, 0x5d, 0x54, 0xfd, 0x76, 0x16, 0x29, 0x59, 0x2b, 0xbc, 0x67, 0xcb, 0x83, 0xd1, 0x7f, 0xb5, 0xa3, 0x26, 0xf2, 0x24, 0x5c, 0xe1, 0x8f, 0xfb, 0x28, 0xe3, 0x6b, 0xf7, 0x12, 0x24, 0xee, 0x57, 0x87, 0x6d, 0xd2, 0x22, 0x4b, 0xf1, 0x33, 0x47, 0xe4, 0xba, 0xfb, 0x71, 0x53, 0xbd, 0x4f, 0xb2, 0xab, 0xf9, 0x19, 0xec, 0xea, 0xa5, 0xc2, 0xf5, 0xdc, 0x73, 0xb0, 0x91, 0x70, 0x9f, 0xe2, 0x07, 0x18, 0x62, 0xda, 0xc8, 0x81, 0x9c, 0x91, 0xbc, 0x9a, 0x2e, 0x34, 0x97, 0x42, 0xd1, 0x18, 0xe7, 0xf4, 0x47, 0x12, 0x87, 0x7c, 0xd9, 0x51, 0x92, 0xeb, 0x63, 0x64, 0x10, 0x56, 0x93, 0x0d, 0x45, 0x56, 0x23, 0x82, 0x1a, 0xdb, 0xdd, 0xaa, 0x90, 0x3e, 0xea, 0x0f, 0xf1, 0x48, 0xa2, 0x62, 0x0a, 0xa4, 0x06, 0xa7, 0x3b, 0x8f, 0x89, 0xd7, 0xa0, 0x92, 0xdc, 0x38, 0x40, 0x98, 0x55, 0x11, 0x83, 0x81, 0xfc, 0xb9, 0x73, 0x6e, 0x80, 0x58, 0xda, 0x1e, 0x09, 0x70, 0x9a, 0x20, 0xe7, 0x7e, 0x49, 0x16, 0x5f, 0xe4, 0x4d, 0x26, 0x62, 0x5c, 0x9c, 0x81, 0x6a, 0xc3, 0x8c, 0x28, 0xd9, 0x44, 0xaf, 0xc4, 0xa8, 0x58, 0x11, 0x7d, 0x01, 0x02, 0x24, 0x8d, 0xef, 0x95, 0xe3, 0xd5, 0xbb, 0xcc, 0x9a, 0x8d, 0x8a, 0x60, 0x78, 0x8d, 0x75, 0x6e, 0x2b, 0xb9, 0x2e, 0x9c, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x31, 0x32, 0x38, 0x52, 0x73, 0x61, 0x31, 0x35, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x02, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      CreateSubscriptionRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 787
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Double"
            name: "requestedPublishingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "requestedLifeTimeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "requestedMaxKeepAliveCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxNotificationsPerPublish"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "publishingEnabled"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "priority"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0x13, 0x03, 0x02, 0x00, 0x00, 0x73, 0xbf, 0x3d, 0x0d, 0x61, 0xc2, 0xb4, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x8a, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0xe0, 0x2e, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00>>"
        testOutput: {}
      CreateSubscriptionResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 790
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Double"
            name: "revisedPublishingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "revisedLifetimeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "revisedMaxKeepAliveCount"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0x16, 0x03, 0xc0, 0x8b, 0xd3, 0x67, 0xcc, 0xa3, 0xd4, 0x01, 0x8a, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0xe0, 0x2e, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00>>"
        testOutput: {}
      DataValue:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "EncodingMask"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(2), b::size(1), c::size(1), d::size(1), e::size(1), f::size(1), g::size(1)>> = <<v["EncodingMask"]["value"]>>
                case g do
                  1 -> 1
                  _ -> 0
                end
            model: "Variant"
            name: "Value"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(2), b::size(1), c::size(1), d::size(1), e::size(1), f::size(1), g::size(1)>> = <<v["EncodingMask"]["value"]>>
                case f do
                  1 -> 1
                  _ -> 0
                end
            model: "StatusCode"
            name: "Status"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(2), b::size(1), c::size(1), d::size(1), e::size(1), f::size(1), g::size(1)>> = <<v["EncodingMask"]["value"]>>
                case e do
                  1 -> 1
                  _ -> 0
                end
            model: "DateTime"
            name: "SourceTimestamp"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(2), b::size(1), c::size(1), d::size(1), e::size(1), f::size(1), g::size(1)>> = <<v["EncodingMask"]["value"]>>
                case c do
                  1 -> 1
                  _ -> 0
                end
            model: "UInt16"
            name: "SourcePicoSeconds"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(2), b::size(1), c::size(1), d::size(1), e::size(1), f::size(1), g::size(1)>> = <<v["EncodingMask"]["value"]>>
                case d do
                  1 -> 1
                  _ -> 0
                end
            model: "DateTime"
            name: "ServerTimestamp"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(2), b::size(1), c::size(1), d::size(1), e::size(1), f::size(1), g::size(1)>> = <<v["EncodingMask"]["value"]>>
                case b do
                  1 -> 1
                  _ -> 0
                end
            model: "UInt16"
            name: "ServerPicoSeconds"
        parser: "binary"
        testInput:
          decode: "<<0x0d, 0xd5, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xb8, 0x3d, 0xa7, 0x8a, 0x34, 0xe5, 0xd5, 0x01, 0xb8, 0x3d, 0xa7, 0x8a, 0x34, 0xe5, 0xd5, 0x01>>"
          encode: ""
      DateTime:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int64"
        parser: "binary"
        testInput:
          decode: "<<0x30, 0x26, 0x9d, 0x12, 0x00, 0x97, 0xd4, 0x01>>"
      DeleteMonitoredItemsRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 781
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "monitoredItemIdsLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["monitoredItemIdsLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["monitoredItemIdsLength"]["value"]
                end
            model: "UInt32"
            name: "monitoredItemIds"
        parser: "binary"
        testInput:
          decode: "\"01000d030002e021f5b3d3f9d501aa00000000000000ffffffff00000000000000020000000100000001000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      DeleteMonitoredItemsResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 784
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "StatusCode"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
        testInput:
          decode: "\"0100100350014b2940fad501fe0300000000000000ffffffff0000000100000000000000ffffffff\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      Demical:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "Encoding"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "Length"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int16"
            name: "Scale"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                length = v["Length"]
                if length <= 0 do
                  1
                else
                  length
                end
            model: "Byte"
            name: "Value"
        parser: "binary"
        testInput:
          decode: ""
          encode: ""
      DiagnosticInfo:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "EncodingMask"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<x::size(1), innerDiagnosticInfo::size(1), innerStatusCode::size(1), additionalInfo::size(1), locale::size(1), localizedText::size(1), namespace::size(1), symbolicId::size(1)>> = <<v["EncodingMask"]["value"]>>
                case symbolicId do
                  0 -> 0
                  1 -> 1
                end
            model: "Int32"
            name: "SymbolicId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<x::size(1), innerDiagnosticInfo::size(1), innerStatusCode::size(1), additionalInfo::size(1), locale::size(1), localizedText::size(1), namespace::size(1), symbolicId::size(1)>> = <<v["EncodingMask"]["value"]>>
                case namespace do
                  0 -> 0
                  1 -> 1
                end
            model: "Int32"
            name: "NamespaceUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<x::size(1), innerDiagnosticInfo::size(1), innerStatusCode::size(1), additionalInfo::size(1), locale::size(1), localizedText::size(1), namespace::size(1), symbolicId::size(1)>> = <<v["EncodingMask"]["value"]>>
                case locale do
                  0 -> 0
                  1 -> 1
                end
            model: "Int32"
            name: "Locale"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<x::size(1), innerDiagnosticInfo::size(1), innerStatusCode::size(1), additionalInfo::size(1), locale::size(1), localizedText::size(1), namespace::size(1), symbolicId::size(1)>> = <<v["EncodingMask"]["value"]>>
                case localizedText do
                  0 -> 0
                  1 -> 1
                end
            model: "Int32"
            name: "LocalizedText"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<x::size(1), innerDiagnosticInfo::size(1), innerStatusCode::size(1), additionalInfo::size(1), locale::size(1), localizedText::size(1), namespace::size(1), symbolicId::size(1)>> = <<v["EncodingMask"]["value"]>>
                case additionalInfo do
                  0 -> 0
                  1 -> 1
                end
            model: "Int32"
            name: "AdditionalInfo"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<x::size(1), innerDiagnosticInfo::size(1), innerStatusCode::size(1), additionalInfo::size(1), locale::size(1), localizedText::size(1), namespace::size(1), symbolicId::size(1)>> = <<v["EncodingMask"]["value"]>>
                case innerStatusCode do
                  0 -> 0
                  1 -> 1
                end
            model: "StatusCode"
            name: "InnerStatusCode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<x::size(1), innerDiagnosticInfo::size(1), innerStatusCode::size(1), additionalInfo::size(1), locale::size(1), localizedText::size(1), namespace::size(1), symbolicId::size(1)>> = <<v["EncodingMask"]["value"]>>
                case innerDiagnosticInfo do
                  0 -> 0
                  1 -> 1
                end
            model: "Int32"
            name: "InnerDiagnosticInfo"
        parser: "binary"
        testInput:
          decode: "<<5, 1,2,3,4, 1, 2, 2,1>>"
      DiscoveryConfiguration:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "CapabilityLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["CapabilityLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["CapabilityLength"]["value"]
                end
            model: "String"
            name: "serverCapabilities"
        p arser: "binary"
      Double:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              units: "bytes"
            size: 8
            type: "float"
        parser: "binary"
        testInput:
          decode: "<<0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xed, 0x40>>"
      Duration:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Double"
        parser: "binary"
      EndpointDescription:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "endpointUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ApplicationDescription"
            name: "server"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverCertificate"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "MessageSecurityMode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "securityPolicyUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "tokenLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["tokenLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["tokenLength"]["value"]
                end
            model: "UserTokenPolicy"
            name: "userIdentityTokens"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "transportProfileUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "securityLevel"
        parser: "binary"
        testInput:
          decode: "<<0x1f, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x34, 0x38, 0x30, 0x32, 0x30, 0x37, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x27, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x02, 0x19, 0x00, 0x00, 0x00, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x34, 0x38, 0x30, 0x32, 0x30, 0x20, 0x05, 0x00, 0x00, 0x30, 0x82, 0x05, 0x1c, 0x30, 0x82, 0x04, 0x04, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x04, 0x5b, 0xeb, 0x71, 0x15, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x34, 0x39, 0x32, 0x35, 0x5a, 0x17, 0x0d, 0x32, 0x33, 0x31, 0x31, 0x31, 0x33, 0x30, 0x30, 0x34, 0x39, 0x32, 0x35, 0x5a, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc3, 0x88, 0x92, 0x87, 0xb9, 0xe3, 0xe8, 0x22, 0x4f, 0x09, 0x82, 0x16, 0x7d, 0x93, 0x9a, 0x8a, 0xa6, 0xe9, 0x90, 0x3c, 0x2c, 0x6d, 0x09, 0x4c, 0xfb, 0xbf, 0x9c, 0x6d, 0x54, 0x66, 0xa8, 0xc9, 0xc4, 0xf1, 0x23, 0x99, 0x29, 0x4f, 0x61, 0x1e, 0x26, 0xc7, 0x6c, 0x6b, 0x1e, 0xdf, 0x32, 0xbb, 0xe2, 0x84, 0xd7, 0xf6, 0x20, 0x82, 0xa4, 0x79, 0x1c, 0x21, 0x20, 0x3f, 0xb6, 0x99, 0x42, 0xcc, 0x30, 0xc7, 0x31, 0x54, 0x14, 0x73, 0x2d, 0x4f, 0x5f, 0x65, 0x8c, 0x5d, 0x4c, 0x37, 0x1e, 0x81, 0x2d, 0x40, 0x64, 0x10, 0x7d, 0x33, 0xdf, 0xc6, 0x64, 0x68, 0x6e, 0xbb, 0xf8, 0x0e, 0x4a, 0x7a, 0x5a, 0x15, 0x68, 0xfb, 0x53, 0x42, 0x6f, 0x93, 0x88, 0x7a, 0x6f, 0xac, 0x84, 0x4e, 0xcb, 0xd4, 0x2d, 0xa2, 0xb9, 0xe3, 0x33, 0x49, 0x40, 0x41, 0x94, 0x15, 0x43, 0xb4, 0xcb, 0xf1, 0xaa, 0x29, 0x39, 0xc3, 0x50, 0x8d, 0x4d, 0xb1, 0x63, 0x28, 0x5a, 0x3c, 0x47, 0xfc, 0x3b, 0x99, 0xcf, 0xe3, 0xa2, 0xfe, 0x1f, 0xd6, 0x6c, 0x9b, 0xdd, 0x1c, 0x7a, 0xf6, 0xb9, 0x6a, 0x37, 0xf2, 0x9b, 0xee, 0xe2, 0x9e, 0x7b, 0xca, 0x15, 0xf5, 0x1b, 0x78, 0xcf, 0x3b, 0x2a, 0xf3, 0x75, 0x81, 0xc6, 0x31, 0xfd, 0x60, 0x3d, 0x58, 0xfa, 0x98, 0xb6, 0x42, 0x11, 0x0b, 0xa7, 0xd4, 0x42, 0x8d, 0xb0, 0x00, 0x9a, 0x68, 0xb6, 0x68, 0x8b, 0x5c, 0x6b, 0x97, 0x0f, 0x83, 0x10, 0xba, 0xc8, 0xfe, 0x78, 0x21, 0x6b, 0xad, 0x63, 0xad, 0xef, 0x98, 0xc1, 0xf3, 0xc1, 0xda, 0xa9, 0xc4, 0x8b, 0x5a, 0x80, 0xf1, 0x5c, 0xd6, 0xd4, 0xea, 0xc6, 0x11, 0x23, 0x8e, 0x3b, 0xda, 0x3f, 0x15, 0xf2, 0xa3, 0xc6, 0x44, 0x08, 0xa0, 0xe9, 0x72, 0x8f, 0x96, 0x5e, 0xe6, 0x40, 0xa4, 0x74, 0x52, 0x0a, 0x7a, 0x69, 0x2d, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0xaa, 0x30, 0x82, 0x01, 0xa6, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x4b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x0d, 0x04, 0x3e, 0x16, 0x3c, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x6e, 0x73, 0x69, 0x20, 0x43, 0x20, 0x53, 0x44, 0x4b, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x22, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x35, 0xd3, 0xff, 0x1b, 0xb6, 0x9b, 0xb3, 0xc9, 0x59, 0x09, 0xb4, 0x4c, 0x3f, 0xc3, 0x42, 0x09, 0x83, 0x0b, 0xf3, 0xa8, 0x30, 0x81, 0xa6, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x81, 0x9e, 0x30, 0x81, 0x9b, 0x80, 0x14, 0x35, 0xd3, 0xff, 0x1b, 0xb6, 0x9b, 0xb3, 0xc9, 0x59, 0x09, 0xb4, 0x4c, 0x3f, 0xc3, 0x42, 0x09, 0x83, 0x0b, 0xf3, 0xa8, 0xa1, 0x7d, 0xa4, 0x7b, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x82, 0x04, 0x5b, 0xeb, 0x71, 0x15, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x16, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x53, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x4c, 0x30, 0x4a, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x82, 0x0f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x0e, 0x8c, 0xd8, 0xf9, 0xd2, 0xd5, 0x7d, 0xac, 0x42, 0x84, 0x24, 0x32, 0x39, 0xcd, 0xdd, 0xbe, 0x85, 0x25, 0x28, 0x36, 0x27, 0xe3, 0x0d, 0xd6, 0xd2, 0xdf, 0x1b, 0xa3, 0x2e, 0xb2, 0x78, 0xda, 0x58, 0x9a, 0x3c, 0x5a, 0xfd, 0x88, 0xbc, 0x40, 0xe2, 0x4b, 0x93, 0x23, 0x5c, 0xc3, 0x63, 0x0d, 0xfc, 0x4b, 0x69, 0x5d, 0x04, 0xbd, 0xd5, 0x18, 0x4f, 0xad, 0xc2, 0x2c, 0xc2, 0xf6, 0xd4, 0xdf, 0x7b, 0xad, 0x8a, 0x16, 0x44, 0xca, 0x34, 0xce, 0x12, 0xf2, 0xc6, 0xe3, 0xf8, 0xe3, 0x3b, 0x7e, 0x5d, 0x39, 0x16, 0x70, 0x9e, 0x44, 0x7a, 0xa2, 0xc6, 0xd3, 0xba, 0x84, 0xd8, 0x66, 0x57, 0x20, 0x08, 0x7d, 0x4e, 0x81, 0x6e, 0xdc, 0xca, 0xb5, 0x62, 0x24, 0x48, 0x8f, 0xe1, 0x4b, 0xcd, 0xd9, 0xfd, 0x86, 0x0b, 0x18, 0x68, 0x4b, 0xf8, 0xfd, 0x95, 0x89, 0xb8, 0xea, 0x2e, 0x18, 0x7e, 0xb8, 0x61, 0x78, 0xa2, 0x6d, 0x21, 0x92, 0x41, 0xa5, 0x4e, 0x5a, 0xf7, 0x81, 0x90, 0x79, 0xff, 0x3e, 0x12, 0x6b, 0xe6, 0xc1, 0xb6, 0xed, 0x95, 0x46, 0x0d, 0x3c, 0x66, 0x6b, 0x61, 0xb8, 0x62, 0x7a, 0xa0, 0x28, 0x5d, 0xe0, 0xca, 0xa0, 0x65, 0x30, 0x58, 0xad, 0xd1, 0xba, 0xcc, 0x04, 0x18, 0xd5, 0xec, 0x50, 0x9d, 0xaf, 0xf0, 0x96, 0xe7, 0x96, 0xa3, 0x03, 0x0e, 0xce, 0x28, 0xad, 0x5f, 0xea, 0x6e, 0x56, 0x08, 0x09, 0x33, 0xda, 0x02, 0x1f, 0xa2, 0x1c, 0xee, 0xda, 0x70, 0x0d, 0xd4, 0x0f, 0x13, 0xd4, 0x02, 0x78, 0x73, 0x25, 0xcf, 0xb5, 0x49, 0x41, 0xf8, 0x36, 0x2b, 0xa3, 0x51, 0x86, 0x10, 0xab, 0x5f, 0xa5, 0xdd, 0x5f, 0xf9, 0x65, 0xfe, 0x0e, 0xd0, 0x13, 0xa3, 0x3c, 0x79, 0xec, 0x11, 0xd0, 0xa0, 0x15, 0xc0, 0x75, 0x0e, 0x73, 0xd1, 0x6c, 0x0d, 0x29, 0x0d, 0xb6, 0xcd, 0x99, 0x02, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x50, 0x73, 0x73, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x15, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x4f, 0x61, 0x65, 0x70, 0x15, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x50, 0x73, 0x73, 0x1b, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x4f, 0x61, 0x65, 0x70, 0x18, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x50, 0x73, 0x73, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4b>>"
        testOutput: {}
      EndpointType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "endpointUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "MessageSecurityMode"
            name: "securityMode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "securityPolicyUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "transportProfileUri"
        parser: "binary"
        testOutput: {}
      EndpointUrlListDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "listsLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["listsLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["listsLength"]["value"]
                end
            model: "String"
            name: "endpointUrlList"
        parser: "binary"
        testOutput: {}
      Enumeration:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
        parser: "binary"
      Error:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Header"
            name: "Header"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "Error"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "Reason"
        parser: "binary"
      ExpandedNodeId:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
        parser: "binary"
      ExtensionObject:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "Encoding"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                Log.info("ExtensionObject: Body: count: " <> inspect v)
                case v["Encoding"]["value"] do
                  0 -> 0
                  _ -> 1
                end
            model:
              $action: "elixir"
              value: |
                Log.info("ExtensionObject: Body: model: " <> inspect v)
                if v["Encoding"]["value"] == 2 do
                  "XmlElement"
                else
                  "String"
                end
            name: "Body"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0x2b, 0x03, 0x01, 0xa0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x0d, 0x12, 0x43, 0x4f, 0xf3, 0x2e, 0x00, 0x00, 0x00, 0x6c, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x20, 0x2d, 0x20, 0x73, 0x70, 0x6f, 0x63, 0x6b, 0x20, 0x2a, 0x2a, 0x2a, 0x20, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x20, 0x2d, 0x20, 0x70, 0x61, 0x70, 0x65, 0x72, 0x20, 0x2d, 0x20, 0x73, 0x63, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x2d, 0x20, 0x4f, 0xf3, 0x15, 0x00, 0x9c, 0xef, 0x94, 0xe0, 0x61, 0xe5, 0xd5, 0x01, 0x9c, 0xef, 0x94, 0xe0, 0x61, 0xe5, 0xd5, 0x01, 0x1d, 0x00, 0x00, 0x00, 0x0d, 0x15, 0x02, 0x2e, 0x00, 0x00, 0x00, 0x6c, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x20, 0x2d, 0x20, 0x73, 0x70, 0x6f, 0x63, 0x6b, 0x20, 0x2a, 0x2a, 0x2a, 0x20, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x20, 0x2d, 0x20, 0x70, 0x61, 0x70, 0x65, 0x72, 0x20, 0x2d, 0x20, 0x73, 0x63, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x2d, 0x20, 0x9c, 0xef, 0x94, 0xe0, 0x61, 0xe5, 0xd5, 0x01, 0x9c, 0xef, 0x94, 0xe0, 0x61, 0xe5, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00>>"
      FindServersOnNetworkRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 12208
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Counter"
            name: "startingRecordId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxRecordsToReturn"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "filterLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["filterLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["filterdLength"]["value"]
                end
            model: "String"
            name: "serverCapabilityFilter"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      FindServersOnNetworkResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 12209
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "lastCounterResetTime"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "serverLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["serverLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["serverLength"]["value"]
                end
            model: "ServerOnNetwork"
            name: "servers"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      MonitoredItemNotification:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "clientHandle"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DataValue"
            name: "Value"
        parser: "binary"
      DataChangeNotification:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "itemsLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["itemsLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["itemsLength"]["value"]
                end
            model: "MonitoredItemNotification"
            name: "monitoredItems"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
      FindServersRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 422
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "endpointUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "localeIdLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["localeIdLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["localeIdLength"]["value"]
                end
            model: "String"
            name: "localeIds"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "serverUriLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["serverUriLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["serverUriLength"]["value"]
                end
            model: "String"
            name: "serverUris"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xd4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      FindServersResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 425
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "serverLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["serverLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["serverLength"]["value"]
                end
            model: "ApplicationDescription"
            name: "servers"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0xa9, 0x01, 0x20, 0xca, 0xbb, 0xf6, 0x36, 0xf0, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x73, 0x2d, 0x4d, 0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x50, 0x72, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x28, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x73, 0x2d, 0x4d, 0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x50, 0x72, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x4a, 0x75, 0x6e, 0x62, 0x65, 0x6f, 0x6d, 0x73, 0x2d, 0x4d, 0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x50, 0x72, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x35, 0x33, 0x34, 0x34, 0x33, 0x2f, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x2f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72>>"
        testOutput: {}
      Float:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: null
              units: "bytes"
            size: 4
            type: "float"
        parser: "binary"
      GetEndpointsRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 428
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "endpointUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "localeIdLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["localeIdLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["localeIdLength"]["value"]
                end
            model: "String"
            name: "localeIds"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "profileUriLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["profileUriLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["profileUriLength"]["value"]
                end
            model: "String"
            name: "profileUris"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0xac, 0x01, 0x00, 0x00, 0x50, 0x3f, 0xbc, 0xf6, 0x36, 0xf0, 0xd5, 0x01, 0x03, 0xb5, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x01, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x01, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79>>"
        testOutput: {}
      GetEndpointsResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 431
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "endpointLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["endpointLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["endpointLength"]["value"]
                end
            model: "EndpointDescription"
            name: "Endpoints"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0xaf, 0x01, 0xa3, 0x71, 0xf4, 0xf6, 0xe3, 0xe6, 0xd5, 0x01, 0xc6, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x34, 0x38, 0x30, 0x32, 0x30, 0x37, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x27, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x02, 0x19, 0x00, 0x00, 0x00, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x34, 0x38, 0x30, 0x32, 0x30, 0x20, 0x05, 0x00, 0x00, 0x30, 0x82, 0x05, 0x1c, 0x30, 0x82, 0x04, 0x04, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x04, 0x5b, 0xeb, 0x71, 0x15, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x34, 0x39, 0x32, 0x35, 0x5a, 0x17, 0x0d, 0x32, 0x33, 0x31, 0x31, 0x31, 0x33, 0x30, 0x30, 0x34, 0x39, 0x32, 0x35, 0x5a, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc3, 0x88, 0x92, 0x87, 0xb9, 0xe3, 0xe8, 0x22, 0x4f, 0x09, 0x82, 0x16, 0x7d, 0x93, 0x9a, 0x8a, 0xa6, 0xe9, 0x90, 0x3c, 0x2c, 0x6d, 0x09, 0x4c, 0xfb, 0xbf, 0x9c, 0x6d, 0x54, 0x66, 0xa8, 0xc9, 0xc4, 0xf1, 0x23, 0x99, 0x29, 0x4f, 0x61, 0x1e, 0x26, 0xc7, 0x6c, 0x6b, 0x1e, 0xdf, 0x32, 0xbb, 0xe2, 0x84, 0xd7, 0xf6, 0x20, 0x82, 0xa4, 0x79, 0x1c, 0x21, 0x20, 0x3f, 0xb6, 0x99, 0x42, 0xcc, 0x30, 0xc7, 0x31, 0x54, 0x14, 0x73, 0x2d, 0x4f, 0x5f, 0x65, 0x8c, 0x5d, 0x4c, 0x37, 0x1e, 0x81, 0x2d, 0x40, 0x64, 0x10, 0x7d, 0x33, 0xdf, 0xc6, 0x64, 0x68, 0x6e, 0xbb, 0xf8, 0x0e, 0x4a, 0x7a, 0x5a, 0x15, 0x68, 0xfb, 0x53, 0x42, 0x6f, 0x93, 0x88, 0x7a, 0x6f, 0xac, 0x84, 0x4e, 0xcb, 0xd4, 0x2d, 0xa2, 0xb9, 0xe3, 0x33, 0x49, 0x40, 0x41, 0x94, 0x15, 0x43, 0xb4, 0xcb, 0xf1, 0xaa, 0x29, 0x39, 0xc3, 0x50, 0x8d, 0x4d, 0xb1, 0x63, 0x28, 0x5a, 0x3c, 0x47, 0xfc, 0x3b, 0x99, 0xcf, 0xe3, 0xa2, 0xfe, 0x1f, 0xd6, 0x6c, 0x9b, 0xdd, 0x1c, 0x7a, 0xf6, 0xb9, 0x6a, 0x37, 0xf2, 0x9b, 0xee, 0xe2, 0x9e, 0x7b, 0xca, 0x15, 0xf5, 0x1b, 0x78, 0xcf, 0x3b, 0x2a, 0xf3, 0x75, 0x81, 0xc6, 0x31, 0xfd, 0x60, 0x3d, 0x58, 0xfa, 0x98, 0xb6, 0x42, 0x11, 0x0b, 0xa7, 0xd4, 0x42, 0x8d, 0xb0, 0x00, 0x9a, 0x68, 0xb6, 0x68, 0x8b, 0x5c, 0x6b, 0x97, 0x0f, 0x83, 0x10, 0xba, 0xc8, 0xfe, 0x78, 0x21, 0x6b, 0xad, 0x63, 0xad, 0xef, 0x98, 0xc1, 0xf3, 0xc1, 0xda, 0xa9, 0xc4, 0x8b, 0x5a, 0x80, 0xf1, 0x5c, 0xd6, 0xd4, 0xea, 0xc6, 0x11, 0x23, 0x8e, 0x3b, 0xda, 0x3f, 0x15, 0xf2, 0xa3, 0xc6, 0x44, 0x08, 0xa0, 0xe9, 0x72, 0x8f, 0x96, 0x5e, 0xe6, 0x40, 0xa4, 0x74, 0x52, 0x0a, 0x7a, 0x69, 0x2d, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0xaa, 0x30, 0x82, 0x01, 0xa6, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x4b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x0d, 0x04, 0x3e, 0x16, 0x3c, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x6e, 0x73, 0x69, 0x20, 0x43, 0x20, 0x53, 0x44, 0x4b, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x22, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x35, 0xd3, 0xff, 0x1b, 0xb6, 0x9b, 0xb3, 0xc9, 0x59, 0x09, 0xb4, 0x4c, 0x3f, 0xc3, 0x42, 0x09, 0x83, 0x0b, 0xf3, 0xa8, 0x30, 0x81, 0xa6, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x81, 0x9e, 0x30, 0x81, 0x9b, 0x80, 0x14, 0x35, 0xd3, 0xff, 0x1b, 0xb6, 0x9b, 0xb3, 0xc9, 0x59, 0x09, 0xb4, 0x4c, 0x3f, 0xc3, 0x42, 0x09, 0x83, 0x0b, 0xf3, 0xa8, 0xa1, 0x7d, 0xa4, 0x7b, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x82, 0x04, 0x5b, 0xeb, 0x71, 0x15, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x16, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x53, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x4c, 0x30, 0x4a, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x82, 0x0f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x0e, 0x8c, 0xd8, 0xf9, 0xd2, 0xd5, 0x7d, 0xac, 0x42, 0x84, 0x24, 0x32, 0x39, 0xcd, 0xdd, 0xbe, 0x85, 0x25, 0x28, 0x36, 0x27, 0xe3, 0x0d, 0xd6, 0xd2, 0xdf, 0x1b, 0xa3, 0x2e, 0xb2, 0x78, 0xda, 0x58, 0x9a, 0x3c, 0x5a, 0xfd, 0x88, 0xbc, 0x40, 0xe2, 0x4b, 0x93, 0x23, 0x5c, 0xc3, 0x63, 0x0d, 0xfc, 0x4b, 0x69, 0x5d, 0x04, 0xbd, 0xd5, 0x18, 0x4f, 0xad, 0xc2, 0x2c, 0xc2, 0xf6, 0xd4, 0xdf, 0x7b, 0xad, 0x8a, 0x16, 0x44, 0xca, 0x34, 0xce, 0x12, 0xf2, 0xc6, 0xe3, 0xf8, 0xe3, 0x3b, 0x7e, 0x5d, 0x39, 0x16, 0x70, 0x9e, 0x44, 0x7a, 0xa2, 0xc6, 0xd3, 0xba, 0x84, 0xd8, 0x66, 0x57, 0x20, 0x08, 0x7d, 0x4e, 0x81, 0x6e, 0xdc, 0xca, 0xb5, 0x62, 0x24, 0x48, 0x8f, 0xe1, 0x4b, 0xcd, 0xd9, 0xfd, 0x86, 0x0b, 0x18, 0x68, 0x4b, 0xf8, 0xfd, 0x95, 0x89, 0xb8, 0xea, 0x2e, 0x18, 0x7e, 0xb8, 0x61, 0x78, 0xa2, 0x6d, 0x21, 0x92, 0x41, 0xa5, 0x4e, 0x5a, 0xf7, 0x81, 0x90, 0x79, 0xff, 0x3e, 0x12, 0x6b, 0xe6, 0xc1, 0xb6, 0xed, 0x95, 0x46, 0x0d, 0x3c, 0x66, 0x6b, 0x61, 0xb8, 0x62, 0x7a, 0xa0, 0x28, 0x5d, 0xe0, 0xca, 0xa0, 0x65, 0x30, 0x58, 0xad, 0xd1, 0xba, 0xcc, 0x04, 0x18, 0xd5, 0xec, 0x50, 0x9d, 0xaf, 0xf0, 0x96, 0xe7, 0x96, 0xa3, 0x03, 0x0e, 0xce, 0x28, 0xad, 0x5f, 0xea, 0x6e, 0x56, 0x08, 0x09, 0x33, 0xda, 0x02, 0x1f, 0xa2, 0x1c, 0xee, 0xda, 0x70, 0x0d, 0xd4, 0x0f, 0x13, 0xd4, 0x02, 0x78, 0x73, 0x25, 0xcf, 0xb5, 0x49, 0x41, 0xf8, 0x36, 0x2b, 0xa3, 0x51, 0x86, 0x10, 0xab, 0x5f, 0xa5, 0xdd, 0x5f, 0xf9, 0x65, 0xfe, 0x0e, 0xd0, 0x13, 0xa3, 0x3c, 0x79, 0xec, 0x11, 0xd0, 0xa0, 0x15, 0xc0, 0x75, 0x0e, 0x73, 0xd1, 0x6c, 0x0d, 0x29, 0x0d, 0xb6, 0xcd, 0x99, 0x01, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x4e, 0x6f, 0x6e, 0x65, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x15, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x4f, 0x61, 0x65, 0x70, 0x15, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x50, 0x73, 0x73, 0x1b, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x4f, 0x61, 0x65, 0x70, 0x18, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x50, 0x73, 0x73, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x00>>"
        testOutput: {}
      Guid:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "Data1"
            size: 4
            type: "integer"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "Data2"
            size: 2
            type: "integer"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "Data3"
            size: 2
            type: "integer"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "Data4"
            size: 8
            type: "integer"
        parser: "binary"
        testInput:
          decode: "<<0x91, 0x2b, 0x96, 0x72, 0x75, 0xfa, 0xe6, 0x4a, 0x8d, 0x28, 0xb4, 0x04, 0xdc, 0x7d, 0xaf, 0x63>>"
      Header:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "messageType"
            size: 3
            type: "bytes"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            default: "F"
            name: "Reserved"
            size: 1
            type: "bytes"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "MessageSize"
        parser: "binary"
      Hello:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Header"
            name: "Header"
            overrides:
              messageType:
                default: "HEL"
                value: "HEL"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "ProtocolVersion"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "ReceiveBufferSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "SendBufferSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "MaxMessageSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "MaxChunkCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "EndpointUrl"
        parser: "binary"
        testInput:
          decode: "<<0x48, 0x45, 0x4c, 0x46, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0xc0, 0xff, 0x3f, 0x00, 0xff, 0xff, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30>>"
          encode: |
            %{
              "EndpointUrl" => %{
                "Length" => %{"value" => 25},
                "value" => "opc.tcp://localhost:53530"
              },
              "Header" => %{
                "Reserved" => "F"
              },
              "MaxChunkCount" => %{"value" => 65535},
              "MaxMessageSize" => %{"value" => 4194240},
              "ProtocolVersion" => %{"value" => 0},
              "ReceiveBufferSize" => %{"value" => 147456},
              "SendBufferSize" => %{"value" => 147456}
            }
      Int16:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              signedness: "signed"
              units: "bytes"
            size: 2
            type: "integer"
        parser: "binary"
      Int32:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              signedness: "signed"
              units: "bytes"
            size: 4
            type: "integer"
        parser: "binary"
        testInput:
          decode: "<<0xff, 0xff, 0x00, 0x00>>"
          encode: "%{\"value\" => 2}"
      Int64:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              signedness: "signed"
              units: "bytes"
            size: 8
            type: "integer"
        parser: "binary"
        testInput:
          decode: "<<0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xed, 0x40>>"
      Integer:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
        parser: "binary"
      KeyValuePair:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "QualifiedName"
            name: "key"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "BaseDataType"
            name: "value"
        parser: "binary"
        testOutput: {}
      LocaleId:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
        parser: "binary"
      LocalizedText:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "EncodingMask"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<bit::size(6), locale::size(1), text::size(1)>> = <<v["EncodingMask"]["value"]>>
                case locale do
                  0 -> 0
                  1 -> 1
                end
            model: "String"
            name: "Locale"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<bit::size(6), locale::size(1), text::size(1)>> = <<v["EncodingMask"]["value"]>>
                case text do
                  0 -> 0
                  1 -> 1
                end
            model: "String"
            name: "Text"
        parser: "binary"
      MessageSecurityMode:
        $parser: "binary"
        description: "P4-T138"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Enumeration"
        parser: "binary"
      ModelChangeStructureDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "affected"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "affectedType"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "verb"
        parser: "binary"
        testOutput: {}
      ModifyMonitoredItemsRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 763
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "timestampsToReturn"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "itemsToModifyLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                Log.info("ModifyMonitoredItemsRequest: itemsToModify: count: " <> inspect v)
                case v["itemsToModifyLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["itemsToModifyLength"]["value"]
                end
            model: "MonitoredItemModifyRequest"
            name: "itemsToModify"
        parser: "binary"
        testInput:
          decode: "\"0100fb0205000020000000567fbc39b3c43d6764d04e1ec2d06a251f15d0b905dba64ec6ac2190f527fe99209fa75440fad5015004000000000000ffffffff0000000000000001000000020000000100000002000000050000000000000000408f400100d4020110000000010000000000000000000000000000000100000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      ModifyMonitoredItemsResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 766
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "MonitoredItemModifyResult"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
        testInput:
          decode: "\"0100fe0240eda75440fad501500400000000000000ffffffff00000001000000000000000000000000408f4001000000000000ffffffff\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      ModifySubscriptionRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 793
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Duration"
            name: "requestedPublishingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Counter"
            name: "requestedLifetimeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Counter"
            name: "requestedMaxKeepAliveCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Counter"
            name: "maxNotificationsPerPublish"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "priority"
        parser: "binary"
        testInput:
          decode: "\"010019030200008aa1bc9d905ef56f37fcd5017c1e000000000000ffffffff30750000000000030000000000000000488f403c000000140000000000000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      ModifySubscriptionResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 796
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Duration"
            name: "revisedPublishingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "revisedLifetimeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "revisedMaxKeepAliveCount"
        parser: "binary"
        testInput:
          decode: "\"01001c031078a75440fad5014f0400000000000000ffffffff0000000000000000408f403c00000014000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      MonitoredItemCreateRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ReadValueId"
            name: "itemToMonitor"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "monitoringMode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "MonitoringParameters"
            name: "requestedParameters"
        parser: "binary"
        testInput:
          decode: "\"0305000c0000004d79456e756d4f626a6563740d000000ffffffff0000ffffffff0200000001000000000000000000f0bf0000000100000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      MonitoredItemCreateResult:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "StatusCode"
            name: "statusCode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "monitoredItemId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Duration"
            name: "revisedSamplingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "revisedQueueSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExtensionObject"
            name: "filterResult"
        parser: "binary"
        testInput:
          decode: "\"00000000010000000000000000408f4001000000000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      MonitoredItemModifyRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "monitoredItemId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "MonitoringParameters"
            name: "requestedParameters"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      MonitoredItemModifyResult:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "StatusCode"
            name: "statusCode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Duration"
            name: "revisedSamplingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "revisedQueueSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExtensionObject"
            name: "filterResult"
        parser: "binary"
        testInput:
          decode: "\"00000000010000000000000000408f4001000000000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      MonitoringParameters:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "clientHandle"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Duration"
            name: "samplingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExtensionObject"
            name: "filter"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "queueSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "discardOldest"
        parser: "binary"
        testInput:
          decode: "\"01000000000000000000f0bf0000000100000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      NetworkGroupDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "pathsLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["pathsLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["pathsLength"]["value"]
                end
            model: "EndpointUrlListDataType"
            name: "networkPaths"
        parser: "binary"
        testOutput: {}
      NodeId:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "EncodingByte"
            options:
              units: "bytes"
            size: 1
            type: "integer"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model:
              $action: "elixir"
              value: |
                <<flag::size(2), type::size(6)>> = <<v["EncodingByte"]>>
                case type do
                  0x00 -> "NodeId_2byte"
                  0x01 -> "NodeId_4byte"
                  _ -> "NodeId_standard"
                end
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<flag::size(2), type::size(6)>> = <<v["EncodingByte"]>>
                if flag == 0b10 || flag == 0b11 do
                  1
                else
                  0
                end
            model: "String"
            name: "NamespaceUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<flag::size(2), type::size(6)>> = <<v["EncodingByte"]>>
                if flag == 0b01 || flag == 0b11 do
                  1
                else
                  0
                end
            model: "UInt32"
            name: "ServerIndex"
        parser: "binary"
        testInput:
          decode: "<<0x43, 0x53, 0xee, 0x2e, 0x00, 0x00, 0x00, 0x7a, 0x61, 0x72, 0x64, 0x20, 0x2d, 0x20, 0x73, 0x70, 0x6f, 0x63, 0x6b, 0x20, 0x2a, 0x2a, 0x2a, 0x20, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x20, 0x2d, 0x20, 0x70, 0x61, 0x70, 0x65, 0x72, 0x20, 0x2d, 0x20, 0x73, 0x63, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x53, 0xee, 0x02, 0x00>>"
      NodeId_2byte:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "Identifier"
        parser: "binary"
        testInput:
          decode: "<<0x03, 0x5a, 0xf8, 0x2e, 0x00, 0x00, 0x00, 0x2d, 0x20, 0x73, 0x70, 0x6f, 0x63, 0x6b, 0x20, 0x2a, 0x2a, 0x2a, 0x20, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x20, 0x2d, 0x20, 0x70, 0x61, 0x70, 0x65, 0x72, 0x20, 0x2d, 0x20, 0x73, 0x63, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x20>>"
      NodeId_4byte:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "Namespace"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt16"
            name: "Identifier"
        parser: "binary"
        testInput:
          decode: "<<0x03, 0x5a, 0xf8, 0x2e, 0x00, 0x00, 0x00, 0x2d, 0x20, 0x73, 0x70, 0x6f, 0x63, 0x6b, 0x20, 0x2a, 0x2a, 0x2a, 0x20, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x20, 0x2d, 0x20, 0x70, 0x61, 0x70, 0x65, 0x72, 0x20, 0x2d, 0x20, 0x73, 0x63, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x20>>"
      NodeId_standard:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt16"
            name: "Namespace"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model:
              $action: "elixir"
              value: |
                <<flag::size(2), type::size(6)>> = <<v["EncodingByte"]>>
                case type do
                  0x02 -> "UInt32"
                  0x03 -> "String"
                  0x04 -> "Guid"
                  0x05 -> "ByteString"
                end
            name: "Identifier"
        parser: "binary"
      NotificationMessage:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "sequenceNumber"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "publishTime"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "dataLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["dataLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["dataLength"]["value"]
                end
            model: "ExtensionObject"
            name: "notificationData"
        parser: "binary"
        testInput:
          decode: "<<0x02, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x5a, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2b, 0x03, 0x01, 0x26, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0d, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x6f, 0x5a, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x00, 0x6f, 0x5a, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      OPCNull:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: null
              signedness: "unsigned"
              units: "bytes"
            size: 1
            type: "integer"
            value: 0
        parser: "binary"
        testInput:
          decode: "<<0x00>>"
      OpenSecureChannelHeader:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "SecureConversationMessageheader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "AsymmetricalgorithmSecurityheader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Sequenceheader"
        parser: "binary"
      OpenSecureChannelRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "OpenSecureChannelHeader"
            name: "header"
            overrides:
              messageType:
                default: "OPN"
                value: "OPN"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 446
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "clientProtocolVersion"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "requestType"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                if v["requestType"]["value"] == 0 do
                  0
                else
                  1
                end
            model: "Int32"
            name: "secureChannelId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "securityMode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count: 0
            model: "String"
            name: "securityPolicyUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "clientNonce"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "requestedLifetime"
        parser: "binary"
        testInput:
          decode: "<<0x4f, 0x50, 0x4e, 0x46, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x4e, 0x6f, 0x6e, 0x65, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xee, 0x36, 0x00>>"
        testOutput: {}
      OpenSecureChannelResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "OpenSecureChannelHeader"
            name: "header"
            overrides:
              messageType:
                default: "OPN"
                value: "OPN"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 449
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "serverProtocolVersion"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ChannelSecurityToken"
            name: "securityToken"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "serverNonce"
        parser: "binary"
        testInput:
          decode: "<<0x4f, 0x50, 0x4e, 0x46, 0x87, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x4e, 0x6f, 0x6e, 0x65, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf0, 0x48, 0x19, 0x78, 0x50, 0xc3, 0xd4, 0x01, 0x80, 0xee, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      PublishRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 826
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "ackLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["ackLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["ackLength"]["value"]
                end
            model: "SubscriptionAcknowledgement"
            name: "subscriptionAcknowledgements"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0x4a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3a, 0x03, 0x02, 0x00, 0x00, 0x73, 0xbf, 0x3d, 0x0d, 0x45, 0x36, 0xca, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x8e, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x60, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00>>"
        testOutput: {}
      PublishResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 829
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "sequenceNumLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["sequenceNumLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["sequenceNumLength"]["value"]
                end
            model: "UInt32"
            name: "availableSequenceNumbers"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "moreNotifications"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NotificationMessage"
            name: "notificationMessage"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "StatusCode"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "infoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["infoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["infoLength"]["value"]
                end
            model: "UInt32"
            name: "diagnosticInfos"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0x88, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3d, 0x03, 0x00, 0x6f, 0x5a, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x80, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x5a, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2b, 0x03, 0x01, 0x26, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0d, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x6f, 0x5a, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x00, 0x6f, 0x5a, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      QualifiedName:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt16"
            name: "NamespaceIndex"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "Name"
        parser: "binary"
      ReadRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 631
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Double"
            name: "maxAge"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "timestampsToReturn"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "nodeLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["nodeLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["nodeLength"]["value"]
                end
            model: "ReadValueId"
            name: "nodesToRead"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0xbe, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x77, 0x02, 0x02, 0x00, 0x00, 0x73, 0xbf, 0x3d, 0x0d, 0xc8, 0x86, 0xb9, 0x68, 0xcc, 0xa3, 0xd4, 0x01, 0x8d, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x0e, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x0f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      ReadResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 634
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "DataValue"
            name: "results"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
        testInput:
          decode: "<<0x4d, 0x53, 0x47, 0x46, 0xec, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x7a, 0x02, 0x70, 0xf4, 0xa1, 0x67, 0xcc, 0xa3, 0xd4, 0x01, 0x88, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x15, 0x02, 0x45, 0x00, 0x00, 0x00, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x74, 0x73, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x01, 0x06, 0x20, 0x00, 0x00, 0x00, 0x01, 0x14, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x48, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x01, 0x15, 0x02, 0x11, 0x00, 0x00, 0x00, 0x48, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x03, 0x00, 0x00, 0x00, 0x35, 0x80, 0x03, 0x00, 0x00, 0x00, 0x35, 0x80, 0x03, 0x00, 0x00, 0x00, 0x35, 0x80, 0x01, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      ReadValueId:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "nodeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "attributeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "indexRange"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "QualifiedName"
            name: "dataEncoding"
        parser: "binary"
        testInput:
          decode: "<<0x01, 0x00, 0xd0, 0x08, 0x0d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff>>"
        testOutput: {}
      RedundantServerDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "serviceLevel"
            type: "bytes"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServerState"
            name: "serverState"
        parser: "binary"
      ReferenceDescription:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "referenceTypeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "isForward"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "nodeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "QualifiedName"
            name: "browseName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "LocalizedText"
            name: "displayName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "nodeClass"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "typeDefinition"
        parser: "binary"
        testInput:
          decode: "<<0x00, 0x2d, 0x00, 0xc0, 0x22, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x48, 0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x02, 0x08, 0x00, 0x00, 0x00, 0x48, 0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      RegisterServer2Request:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 12211
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RegisteredServer"
            name: "Server"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "configurationLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["configurationLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["configurationLength"]["value"]
                end
            model: "String"
            name: "discoveryConfiguration"
        parser: "binary"
        testOutput: {}
      RegisterServer2Response:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 12212
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["resultLength"]["value"]
                end
            model: "StatusCode"
            name: "configurationResults"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      RegisterServerRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 437
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RegisteredServer"
            name: "Server"
        parser: "binary"
        testOutput: {}
      RegisterServerResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 440
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
        parser: "binary"
        testInput:
          decode: {}
        testOutput: {}
      RegisteredServer:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "productUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "serverNameLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["serverNameLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["serverNameLength"]["value"]
                end
            model: "LocalizedText"
            name: "serverNames"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "serverType"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "gatewayServerUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "urlLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["UrlLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["UrlLength"]["value"]
                end
            model: "LocalizedText"
            name: "discoveryUrls"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "semaphoreFilePath"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "isOnline"
        parser: "binary"
        testInput:
          decode: "<<0xa3, 0x71, 0xf4, 0xf6, 0xe3, 0xe6, 0xd5, 0x01, 0xc6, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x34, 0x38, 0x30, 0x32, 0x30, 0x37, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x27, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x02, 0x19, 0x00, 0x00, 0x00, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x34, 0x38, 0x30, 0x32, 0x30, 0x20, 0x05, 0x00, 0x00, 0x30, 0x82, 0x05, 0x1c, 0x30, 0x82, 0x04, 0x04, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x04, 0x5b, 0xeb, 0x71, 0x15, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31, 0x34, 0x30, 0x30, 0x34, 0x39, 0x32, 0x35, 0x5a, 0x17, 0x0d, 0x32, 0x33, 0x31, 0x31, 0x31, 0x33, 0x30, 0x30, 0x34, 0x39, 0x32, 0x35, 0x5a, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc3, 0x88, 0x92, 0x87, 0xb9, 0xe3, 0xe8, 0x22, 0x4f, 0x09, 0x82, 0x16, 0x7d, 0x93, 0x9a, 0x8a, 0xa6, 0xe9, 0x90, 0x3c, 0x2c, 0x6d, 0x09, 0x4c, 0xfb, 0xbf, 0x9c, 0x6d, 0x54, 0x66, 0xa8, 0xc9, 0xc4, 0xf1, 0x23, 0x99, 0x29, 0x4f, 0x61, 0x1e, 0x26, 0xc7, 0x6c, 0x6b, 0x1e, 0xdf, 0x32, 0xbb, 0xe2, 0x84, 0xd7, 0xf6, 0x20, 0x82, 0xa4, 0x79, 0x1c, 0x21, 0x20, 0x3f, 0xb6, 0x99, 0x42, 0xcc, 0x30, 0xc7, 0x31, 0x54, 0x14, 0x73, 0x2d, 0x4f, 0x5f, 0x65, 0x8c, 0x5d, 0x4c, 0x37, 0x1e, 0x81, 0x2d, 0x40, 0x64, 0x10, 0x7d, 0x33, 0xdf, 0xc6, 0x64, 0x68, 0x6e, 0xbb, 0xf8, 0x0e, 0x4a, 0x7a, 0x5a, 0x15, 0x68, 0xfb, 0x53, 0x42, 0x6f, 0x93, 0x88, 0x7a, 0x6f, 0xac, 0x84, 0x4e, 0xcb, 0xd4, 0x2d, 0xa2, 0xb9, 0xe3, 0x33, 0x49, 0x40, 0x41, 0x94, 0x15, 0x43, 0xb4, 0xcb, 0xf1, 0xaa, 0x29, 0x39, 0xc3, 0x50, 0x8d, 0x4d, 0xb1, 0x63, 0x28, 0x5a, 0x3c, 0x47, 0xfc, 0x3b, 0x99, 0xcf, 0xe3, 0xa2, 0xfe, 0x1f, 0xd6, 0x6c, 0x9b, 0xdd, 0x1c, 0x7a, 0xf6, 0xb9, 0x6a, 0x37, 0xf2, 0x9b, 0xee, 0xe2, 0x9e, 0x7b, 0xca, 0x15, 0xf5, 0x1b, 0x78, 0xcf, 0x3b, 0x2a, 0xf3, 0x75, 0x81, 0xc6, 0x31, 0xfd, 0x60, 0x3d, 0x58, 0xfa, 0x98, 0xb6, 0x42, 0x11, 0x0b, 0xa7, 0xd4, 0x42, 0x8d, 0xb0, 0x00, 0x9a, 0x68, 0xb6, 0x68, 0x8b, 0x5c, 0x6b, 0x97, 0x0f, 0x83, 0x10, 0xba, 0xc8, 0xfe, 0x78, 0x21, 0x6b, 0xad, 0x63, 0xad, 0xef, 0x98, 0xc1, 0xf3, 0xc1, 0xda, 0xa9, 0xc4, 0x8b, 0x5a, 0x80, 0xf1, 0x5c, 0xd6, 0xd4, 0xea, 0xc6, 0x11, 0x23, 0x8e, 0x3b, 0xda, 0x3f, 0x15, 0xf2, 0xa3, 0xc6, 0x44, 0x08, 0xa0, 0xe9, 0x72, 0x8f, 0x96, 0x5e, 0xe6, 0x40, 0xa4, 0x74, 0x52, 0x0a, 0x7a, 0x69, 0x2d, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0xaa, 0x30, 0x82, 0x01, 0xa6, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x4b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x0d, 0x04, 0x3e, 0x16, 0x3c, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x6e, 0x73, 0x69, 0x20, 0x43, 0x20, 0x53, 0x44, 0x4b, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x22, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x35, 0xd3, 0xff, 0x1b, 0xb6, 0x9b, 0xb3, 0xc9, 0x59, 0x09, 0xb4, 0x4c, 0x3f, 0xc3, 0x42, 0x09, 0x83, 0x0b, 0xf3, 0xa8, 0x30, 0x81, 0xa6, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x81, 0x9e, 0x30, 0x81, 0x9b, 0x80, 0x14, 0x35, 0xd3, 0xff, 0x1b, 0xb6, 0x9b, 0xb3, 0xc9, 0x59, 0x09, 0xb4, 0x4c, 0x3f, 0xc3, 0x42, 0x09, 0x83, 0x0b, 0xf3, 0xa8, 0xa1, 0x7d, 0xa4, 0x7b, 0x30, 0x79, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x42, 0x61, 0x76, 0x61, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09, 0x4e, 0x75, 0x72, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x17, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6d, 0x62, 0x48, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x19, 0x55, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x40, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x82, 0x04, 0x5b, 0xeb, 0x71, 0x15, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02, 0xf4, 0x30, 0x16, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x53, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x4c, 0x30, 0x4a, 0x86, 0x37, 0x75, 0x72, 0x6e, 0x3a, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x3a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x55, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x69, 0x43, 0x82, 0x0f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4d, 0x33, 0x49, 0x56, 0x52, 0x38, 0x4a, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x0e, 0x8c, 0xd8, 0xf9, 0xd2, 0xd5, 0x7d, 0xac, 0x42, 0x84, 0x24, 0x32, 0x39, 0xcd, 0xdd, 0xbe, 0x85, 0x25, 0x28, 0x36, 0x27, 0xe3, 0x0d, 0xd6, 0xd2, 0xdf, 0x1b, 0xa3, 0x2e, 0xb2, 0x78, 0xda, 0x58, 0x9a, 0x3c, 0x5a, 0xfd, 0x88, 0xbc, 0x40, 0xe2, 0x4b, 0x93, 0x23, 0x5c, 0xc3, 0x63, 0x0d, 0xfc, 0x4b, 0x69, 0x5d, 0x04, 0xbd, 0xd5, 0x18, 0x4f, 0xad, 0xc2, 0x2c, 0xc2, 0xf6, 0xd4, 0xdf, 0x7b, 0xad, 0x8a, 0x16, 0x44, 0xca, 0x34, 0xce, 0x12, 0xf2, 0xc6, 0xe3, 0xf8, 0xe3, 0x3b, 0x7e, 0x5d, 0x39, 0x16, 0x70, 0x9e, 0x44, 0x7a, 0xa2, 0xc6, 0xd3, 0xba, 0x84, 0xd8, 0x66, 0x57, 0x20, 0x08, 0x7d, 0x4e, 0x81, 0x6e, 0xdc, 0xca, 0xb5, 0x62, 0x24, 0x48, 0x8f, 0xe1, 0x4b, 0xcd, 0xd9, 0xfd, 0x86, 0x0b, 0x18, 0x68, 0x4b, 0xf8, 0xfd, 0x95, 0x89, 0xb8, 0xea, 0x2e, 0x18, 0x7e, 0xb8, 0x61, 0x78, 0xa2, 0x6d, 0x21, 0x92, 0x41, 0xa5, 0x4e, 0x5a, 0xf7, 0x81, 0x90, 0x79, 0xff, 0x3e, 0x12, 0x6b, 0xe6, 0xc1, 0xb6, 0xed, 0x95, 0x46, 0x0d, 0x3c, 0x66, 0x6b, 0x61, 0xb8, 0x62, 0x7a, 0xa0, 0x28, 0x5d, 0xe0, 0xca, 0xa0, 0x65, 0x30, 0x58, 0xad, 0xd1, 0xba, 0xcc, 0x04, 0x18, 0xd5, 0xec, 0x50, 0x9d, 0xaf, 0xf0, 0x96, 0xe7, 0x96, 0xa3, 0x03, 0x0e, 0xce, 0x28, 0xad, 0x5f, 0xea, 0x6e, 0x56, 0x08, 0x09, 0x33, 0xda, 0x02, 0x1f, 0xa2, 0x1c, 0xee, 0xda, 0x70, 0x0d, 0xd4, 0x0f, 0x13, 0xd4, 0x02, 0x78, 0x73, 0x25, 0xcf, 0xb5, 0x49, 0x41, 0xf8, 0x36, 0x2b, 0xa3, 0x51, 0x86, 0x10, 0xab, 0x5f, 0xa5, 0xdd, 0x5f, 0xf9, 0x65, 0xfe, 0x0e, 0xd0, 0x13, 0xa3, 0x3c, 0x79, 0xec, 0x11, 0xd0, 0xa0, 0x15, 0xc0, 0x75, 0x0e, 0x73, 0xd1, 0x6c, 0x0d, 0x29, 0x0d, 0xb6, 0xcd, 0x99, 0x01, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x4e, 0x6f, 0x6e, 0x65, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x15, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x4f, 0x61, 0x65, 0x70, 0x15, 0x00, 0x00, 0x00, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x50, 0x73, 0x73, 0x1b, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x42, 0x61, 0x73, 0x69, 0x63, 0x32, 0x35, 0x36, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x4f, 0x61, 0x65, 0x70, 0x18, 0x00, 0x00, 0x00, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x52, 0x73, 0x61, 0x50, 0x73, 0x73, 0x41, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x61, 0x74, 0x63, 0x70, 0x2d, 0x75, 0x61, 0x73, 0x63, 0x2d, 0x75, 0x61, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x00>>"
        testOutput: {}
      RepublishRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 832
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "retransmitSequenceNumber"
        parser: "binary"
        testInput:
          decode: "\"01004003000210b71bd2e9f7d5015f04000000000000ffffffff000000000000001000000001000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      RepublishResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 835
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NotificationMessage"
            name: "notificationMessage"
        parser: "binary"
        testInput:
          decode: "\"01004003000210b71bd2e9f7d5015f04000000000000ffffffff000000000000001000000001000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      RequestHeader:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "authenticationToken"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "timestamp"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "requestHandle"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "returnDiagnostics"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "auditEntryId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "timeoutHint"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExtensionObject"
            name: "additionalHeader"
        parser: "binary"
        testInput:
          decode: "<<0x02, 0x00, 0x00, 0x86, 0x0f, 0x0e, 0x56, 0x20, 0x66, 0x24, 0xb6, 0x18, 0xe6, 0xd5, 0x01, 0xdd, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00>>"
      ResponseHeader:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "timestamp"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "requestHandle"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "StatusCode"
            name: "serviceResult"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DiagnosticInfo"
            name: "serviceDiagnostics"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "stringTableLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["stringTableLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["stringTableLength"]["value"]
                end
            model: "String"
            name: "stringTable"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ExtensionObject"
            name: "additionalHeader"
        parser: "binary"
        testInput:
          decode: "<<0xd0, 0x7b, 0x42, 0x78, 0x50, 0xc3, 0xd4, 0x01, 0xbe, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00>>"
      SByte:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              signedness: "signed"
              units: "bytes"
            size: 1
            type: "integer"
        parser: "binary"
      SamplingIntervalDiagnosticsDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "samplingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "sampledMonitoredItemsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxSampledMonitoredItemsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "disabledMonitoredItemsSamplingCount"
        parser: "binary"
      SecureConersationMessageabortbody:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "Error"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "Reason"
        parser: "binary"
      SecureConversationMessagefooter:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "Padding"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "Signature"
        parser: "binary"
      SecureConversationMessageheader:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "messageType"
            size: 3
            type: "bytes"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            default: "F"
            name: "IsFinal"
            size: 1
            type: "bytes"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "MessageSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "SecureChannelId"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      SemanticChangeStructureDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "affected"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "affectedType"
        parser: "binary"
        testOutput: {}
      Sequenceheader:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "SequenceNumber"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "RequestId"
        parser: "binary"
      ServerDiagnosticsSummaryDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "serverViewCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "currentSessionCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "cumulatedSessionCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "securityRejectedSessionCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "rejectedsessionCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "sessionTimeoutCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "sessionAbortCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "publishingIntervalCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "currentSubscriptionCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "cumulatedSubscriptionConut"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "securityRejectedRequestsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "rejectedRequestsCount"
        parser: "binary"
      ServerOnNetwork:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "recordId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "discoveryUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "capabilityLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["capabilityLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["capabilityLength"]["value"]
                end
            model: "String"
            name: "serverCapabilities"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      ServerState:
        $parser: "binary"
        description: "P5-T136"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Enumeration"
        parser: "binary"
      ServerStatusDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "startTime"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "currentTime"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "state"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "BuildInfo"
            name: "buildInfo"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "secondsTillShutdown"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "LocalizedText"
            name: "shutdownReason"
        parser: "binary"
        testInput:
          decode: "<<0x90, 0x6c, 0x5a, 0x3d, 0x3b, 0xc3, 0xd4, 0x01, 0x40, 0xe5, 0xe1, 0x77, 0x50, 0xc3, 0xd4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x70, 0x72, 0x6f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x3a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0xff, 0xff, 0xff, 0x10, 0x00, 0x00, 0x00, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x03, 0x00, 0x00, 0x00, 0x33, 0x2e, 0x31, 0x05, 0x00, 0x00, 0x00, 0x36, 0x2d, 0x31, 0x39, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      ServiceCounterDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "totalCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "errorCount"
        parser: "binary"
        testOutput: {}
      SessionAuthenticationToken:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "channelId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "tokenId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "createdAt"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "revisedLifetime"
        parser: "binary"
        testInput:
          decode: ""
        testOutput: {}
      SessionDiagnosticsDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "sessionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "sessionName"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ApplicationDescription"
            name: "clientDescription"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "serverUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "endpointUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "idLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["idLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["idLength"]["value"]
                end
            model: "LocaleId"
            name: "localeIds"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Duration"
            name: "actualSessionTimeout"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxResponseMessageSize"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "clientConnectionTime"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "clientLastContactTime"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "currentSubscriptionsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "currentMonitoredItemsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "currentPublishRequestsInQueue"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "totalRequestCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "unauthorizedRequestCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "readCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "historyReadCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "writeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "historyUpdateCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "callCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "creeateMonitoredItemsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "modifyMonitoredItemsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "setMonitoringModeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "setTriggeringCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "deleteMonitoredItemsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "createSubscriptionCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "modifySubscriptionCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "setPublishingModeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "publishCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "republishCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "transferSubscriptionsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "deleteSubscriptionsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "addNodesCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "addReferencesCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "deleteNodesCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "deleteReferencesCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "deleteReferencesCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "browseCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "browseNextCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "translateBrowsePathsToNodeIdsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "queryFirstCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "queryNextCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "registerNodesCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ServiceCounterDataType"
            name: "unregisterNodesCount"
        parser: "binary"
        testOutput: {}
      SessionSecurityDiagnosticsDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "sessionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "clientUserIdOfSession"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "historyLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                case v["historyLength"]["value"] do
                  x when x in [-1, 0] -> 0
                  _ -> v["historyLength"]["value"]
                end
            model: "String"
            name: "clientUserIdHistory"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "authenticationMechanism"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "encoding"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "transportProtocol"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "MessageSecurityMode"
            name: "securityMode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "securityPolicyUri"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "clientCertificate"
        parser: "binary"
        testOutput: {}
      SignatureData:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "algorithm"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "signature"
        parser: "binary"
        testInput:
          decode: "<<0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>"
      SignedSoftwareCertificate:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "certificateDate"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ByteString"
            name: "signature"
        parser: "binary"
      StatusCode:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
        parser: "binary"
      StatusResult:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "StatusCode"
            name: "statusCode"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DiagnossticInfo"
            name: "diagnosticInfo"
        parser: "binary"
        testOutput: {}
      String:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "Length"
            overrides:
              value:
                default: -1
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            size:
              $action: "elixir"
              value: |
                Log.info("String: value: " <> inspect v)
                case v["Length"]["value"] do
                  x when x in [0, -1, 4294967295] -> 0
                  _ -> v["Length"]["value"]
                end
            type: "bytes"
        parser: "binary"
        testInput:
          decode: "<<0x06, 0x00, 0x00, 0x00, 0xE6, 0xB0, 0xB4, 0x42, 0x6F, 0x79>>"
      SubscriptionAcknowledgement:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "sequenceNumber"
        parser: "binary"
        testInput:
          decode: "<<0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00>>"
        testOutput: {}
      SubscriptionDiagnosticsDataType:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "sessionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "subscriptionId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "priority"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Duration"
            name: "publishingInterval"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxKeepAliveCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxLifeTimeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "maxNotificationsPerPublish"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Boolean"
            name: "publishingEnabled"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "modifyCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "enableCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "disableCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "republishRequestCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "republishMessageCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "tranferRequestCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "transferredToAltClientCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "transferredToSameClientCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "publishRequestCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "dataChangeNotificationsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "evenNotificationsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "notificationsCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "latePublishRequestCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "currentKeepAliveCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "currentLifetimeCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "unacknowledgedMessageCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "discardedMessageCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "discardedMessageCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "monitoringQueueOverflowCount"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "nextSequenceNumber"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "eventQueueOverFlowCount"
        parser: "binary"
        testOutput: {}
      SymmetricalgorithmSecurityheader:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "TokenId"
        parser: "binary"
      UInt16:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              signedness: "unsigned"
              units: "bytes"
            size: 2
            type: "integer"
        parser: "binary"
      UInt32:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              signedness: "unsigned"
              units: "bytes"
            size: 4
            type: "integer"
        parser: "binary"
        testInput:
          decode: "<<0xff, 0xff, 0x00, 0x00>>"
      UInt64:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            options:
              endianness: "little"
              signedness: "unsigned"
              units: "bytes"
            size: 8
            type: "integer"
        parser: "binary"
      UserIdentityToken: {}
      UserTokenPolicy:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "policyId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "tokenType"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "issuedTokenType"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "issuerEndpointUrl"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
            name: "securityPolicyUri"
        parser: "binary"
        testInput:
          decode: "<<0x0f, 0x00, 0x00, 0x00, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>"
      Variant:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Byte"
            name: "EncodingMask"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(1), b::size(1), c::size(6)>> = <<v["EncodingMask"]["value"]>>
                case a do
                  1 -> 1
                  _ -> 0
                end
            model: "Int32"
            name: "ArrayLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(1), b::size(1), c::size(6)>> = <<v["EncodingMask"]["value"]>>
                case c do
                  0 -> 0
                  _ ->
                    length = if (v["ArrayLength"]), do: ((v["ArrayLength"] |> Enum.at(0))["value"]), else: 0
                    case length do
                      x when x in [0, nil] -> 1
                      _ -> length
                    end
                end
            model:
              $action: "elixir"
              value: |
                <<a::size(1), b::size(1), c::size(6)>> = <<v["EncodingMask"]["value"]>>
                type = get(["type"])["t#{c}"]
                type
            name: "Value"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                <<a::size(1), b::size(1), c::size(6)>> = <<v["EncodingMask"]["value"]>>
                case b do
                  1 -> 1
                  _ -> 0
                end
            model: "Int32"
            name: "ArrayDimensionsLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            count:
              $action: "elixir"
              value: |
                length = (v["ArrayDimensionsLength"] |> Enum.at(0))["value"]
                case length do
                  nil -> 0
                  _ -> length
                end
            model: "Int32"
            name: "ArrayDimensions"
        parser: "binary"
        testInput:
          decode: "<<0xd5, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00>>"
          encode: ""
      ViewDescription:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "viewId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DateTime"
            name: "timestamp"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
            name: "viewVersion"
        parser: "binary"
        testInput:
          decode: "<<0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00>>"
        testOutput: {}
      WriteRequest:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 673
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "RequestHeader"
            name: "requestHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "nodeLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "WriteValue"
            name: "nodesToWrite"
            count:
              $action: "elixir"
              value: |
                case v["nodeLength"]["value"] do
                  x when x in [0, -1, 4294967295] -> 0
                  _ -> v["nodeLength"]["value"]
                end
        parser: "binary"
        testInput:
          decode: "\"0100a102000270982e2515f8d5018400000000000000ffffffff30750000000000010000000301001a0000004465766963652e47726f7570312e446576696365312e546167310d000000ffffffff01067b000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      IntegerId:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "UInt32"
        parser: "binary"
      WriteResponse:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "TypeId"
            overrides:
              Identifier:
                value:
                  value: 676
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "ResponseHeader"
            name: "responseHeader"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "resultLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "StatusCode"
            name: "results"
            count:
              $action: "elixir"
              value: |
                case v["resultLength"]["value"] do
                  x when x in [0, -1, 4294967295] -> 0
                  _ -> v["resultLength"]["value"]
                end
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "diagnosticInfoLength"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DiagnosticInfo"
            name: "diagnosticInfos"
            count:
              $action: "elixir"
              value: |
                case v["diagnosticInfoLength"]["value"] do
                  x when x in [0, -1, 4294967295] -> 0
                  _ -> v["diagnosticInfoLength"]["value"]
                end
        parser: "binary"
        testInput:
          decode: "\"0100a402308050cc44f8d501bc0000000000000000ffffffff0000000100000000000000ffffffff\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      NumericRange:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "String"
        parser: "binary"
        testInput:
        testOutput: {}
      WriteValue:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NodeId"
            name: "nodeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "IntegerId"
            name: "attributeId"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "NumericRange"
            name: "indexRange"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "DataValue"
            name: "value"
        parser: "binary"
        testInput:
          decode: "\"0301001a0000004465766963652e47726f7570312e446576696365312e546167310d000000ffffffff01067b000000\" |> Base.decode16!(case: :mixed)"
        testOutput: {}
      XmlElement:
        $parser: "binary"
        fields:
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Reference"
            model: "Int32"
            name: "Length"
          - __struct__: "Elixir.Compiler.Model.Binary.Struct.Field"
            name: "value"
            size:
              $action: "elixir"
              value: |
                v["Length"]["value"]
            type: "bytes"
        parser: "binary"
        testInput:
          decode: "<<0x0D, 0x00, 0x00, 0x00, 0x3c, 0x41, 0x3e, 0x72, 0x6f, 0x74, 0xE6, 0xB0, 0xB4, 0x3c, 0x3f, 0x41, 0x3e>>"
